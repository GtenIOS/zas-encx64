// This file is autogenerated using `X64InstrBuilder` swift project. Do not edit this file!!

const instr = @import("instr.zig");
const Instruction = instr.Instruction;
const Instr = instr.Instr;
const Operand = @import("opnd.zig").Operand;
const RegGpIdx = @import("reg.zig").RegGpIdx;
const Prefix = @import("pfx.zig").Prefix;
const OperandEncoding = @import("opnd.zig").OperandEncoding;
const OperatingMode = @import("common").OperatingMode;

const instrsa0 = [_]Instruction{ Instruction{ .instr0 = Instr(0).init("aaa", &[_]u8{0x37}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("aad", &[_]u8{ 0xD5, 0x0A }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("aam", &[_]u8{ 0xD4, 0x0A }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("aas", &[_]u8{0x3F}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) } };
const instrsa1 = [_]Instruction{ Instruction{ .instr1 = Instr(1).init("aad", &[_]u8{0xD5}, .i, [1]Operand{.{ .imm = .{ .imm8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("aam", &[_]u8{0xD4}, .i, [1]Operand{.{ .imm = .{ .imm8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 8, null, null) } };
const instrsa2 = [_]Instruction{ Instruction{ .instr2 = Instr(2).init("adc", &[_]u8{0x14}, .i, [2]Operand{ .{ .reg = .reg8A }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("adc", &[_]u8{0x15}, .i, [2]Operand{ .{ .reg = .reg16A }, .{ .imm = .{ .imm16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("adc", &[_]u8{0x15}, .i, [2]Operand{ .{ .reg = .reg32A }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("adc", &[_]u8{0x15}, .i, [2]Operand{ .{ .reg = .reg64A }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("adc", &[_]u8{0x80}, .{ .d = 2 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("adc", &[_]u8{0x80}, .{ .d = 2 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("adc", &[_]u8{0x81}, .{ .d = 2 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("adc", &[_]u8{0x81}, .{ .d = 2 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("adc", &[_]u8{0x81}, .{ .d = 2 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("adc", &[_]u8{0x83}, .{ .d = 2 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("adc", &[_]u8{0x83}, .{ .d = 2 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("adc", &[_]u8{0x83}, .{ .d = 2 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("adc", &[_]u8{0x10}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("adc", &[_]u8{0x10}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("adc", &[_]u8{0x11}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg16Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("adc", &[_]u8{0x11}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg32Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("adc", &[_]u8{0x11}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg64Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("adc", &[_]u8{0x12}, .rm, [2]Operand{ .{ .reg = .{ .reg8Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("adc", &[_]u8{0x12}, .rm, [2]Operand{ .{ .reg = .{ .reg8Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("adc", &[_]u8{0x13}, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("adc", &[_]u8{0x13}, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("adc", &[_]u8{0x13}, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("add", &[_]u8{0x04}, .i, [2]Operand{ .{ .reg = .reg8A }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("add", &[_]u8{0x05}, .i, [2]Operand{ .{ .reg = .reg16A }, .{ .imm = .{ .imm16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("add", &[_]u8{0x05}, .i, [2]Operand{ .{ .reg = .reg32A }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("add", &[_]u8{0x05}, .i, [2]Operand{ .{ .reg = .reg64A }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("add", &[_]u8{0x80}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("add", &[_]u8{0x80}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("add", &[_]u8{0x81}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("add", &[_]u8{0x81}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("add", &[_]u8{0x81}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("add", &[_]u8{0x83}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("add", &[_]u8{0x83}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("add", &[_]u8{0x83}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("add", &[_]u8{0x00}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("add", &[_]u8{0x00}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("add", &[_]u8{0x01}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg16Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("add", &[_]u8{0x01}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg32Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("add", &[_]u8{0x01}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg64Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("add", &[_]u8{0x02}, .rm, [2]Operand{ .{ .reg = .{ .reg8Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("add", &[_]u8{0x02}, .rm, [2]Operand{ .{ .reg = .{ .reg8Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("add", &[_]u8{0x03}, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("add", &[_]u8{0x03}, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("add", &[_]u8{0x03}, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("and", &[_]u8{0x24}, .i, [2]Operand{ .{ .reg = .reg8A }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("and", &[_]u8{0x25}, .i, [2]Operand{ .{ .reg = .reg16A }, .{ .imm = .{ .imm16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("and", &[_]u8{0x25}, .i, [2]Operand{ .{ .reg = .reg32A }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("and", &[_]u8{0x25}, .i, [2]Operand{ .{ .reg = .reg64A }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("and", &[_]u8{0x80}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("and", &[_]u8{0x80}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("and", &[_]u8{0x81}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("and", &[_]u8{0x81}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("and", &[_]u8{0x81}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("and", &[_]u8{0x83}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("and", &[_]u8{0x83}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("and", &[_]u8{0x83}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("and", &[_]u8{0x20}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("and", &[_]u8{0x20}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("and", &[_]u8{0x21}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg16Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("and", &[_]u8{0x21}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg32Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("and", &[_]u8{0x21}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg64Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("and", &[_]u8{0x22}, .rm, [2]Operand{ .{ .reg = .{ .reg8Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("and", &[_]u8{0x22}, .rm, [2]Operand{ .{ .reg = .{ .reg8Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("and", &[_]u8{0x23}, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("and", &[_]u8{0x23}, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("and", &[_]u8{0x23}, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) } };
const instrsa3 = [_]Instruction{};
const instrsa4 = [_]Instruction{};
const instrsa = [_][]const Instruction{ &instrsa0, &instrsa1, &instrsa2, &instrsa3, &instrsa4 };

const instrsb0 = [_]Instruction{};
const instrsb1 = [_]Instruction{ Instruction{ .instr1 = Instr(1).init("bswap", &[_]u8{ 0x0F, 0xC8 }, .ri, [1]Operand{.{ .reg = .{ .reg32Gp = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("bswap", &[_]u8{ 0x0F, 0xC8 }, .ri, [1]Operand{.{ .reg = .{ .reg64Gp = undefined } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) } };
const instrsb2 = [_]Instruction{ Instruction{ .instr2 = Instr(2).init("bound", &[_]u8{0x62}, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .mem = .{ .mem16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("bound", &[_]u8{0x62}, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .mem = .{ .mem32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("bsf", &[_]u8{ 0x0F, 0xBC }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("bsf", &[_]u8{ 0x0F, 0xBC }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("bsf", &[_]u8{ 0x0F, 0xBC }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("bsr", &[_]u8{ 0x0F, 0xBD }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("bsr", &[_]u8{ 0x0F, 0xBD }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("bsr", &[_]u8{ 0x0F, 0xBD }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("bt", &[_]u8{ 0x0F, 0xA3 }, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg16Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("bt", &[_]u8{ 0x0F, 0xA3 }, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg32Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("bt", &[_]u8{ 0x0F, 0xA3 }, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg64Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("bt", &[_]u8{ 0x0F, 0xBA }, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("bt", &[_]u8{ 0x0F, 0xBA }, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("bt", &[_]u8{ 0x0F, 0xBA }, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("btc", &[_]u8{ 0x0F, 0xBB }, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg16Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("btc", &[_]u8{ 0x0F, 0xBB }, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg32Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("btc", &[_]u8{ 0x0F, 0xBB }, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg64Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("btc", &[_]u8{ 0x0F, 0xBA }, .{ .d = 7 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("btc", &[_]u8{ 0x0F, 0xBA }, .{ .d = 7 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("btc", &[_]u8{ 0x0F, 0xBA }, .{ .d = 7 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("btr", &[_]u8{ 0x0F, 0xB3 }, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg16Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("btr", &[_]u8{ 0x0F, 0xB3 }, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg32Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("btr", &[_]u8{ 0x0F, 0xB3 }, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg64Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("btr", &[_]u8{ 0x0F, 0xBA }, .{ .d = 6 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("btr", &[_]u8{ 0x0F, 0xBA }, .{ .d = 6 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("btr", &[_]u8{ 0x0F, 0xBA }, .{ .d = 6 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("bts", &[_]u8{ 0x0F, 0xAB }, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg16Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("bts", &[_]u8{ 0x0F, 0xAB }, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg32Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("bts", &[_]u8{ 0x0F, 0xAB }, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg64Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("bts", &[_]u8{ 0x0F, 0xBA }, .{ .d = 5 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("bts", &[_]u8{ 0x0F, 0xBA }, .{ .d = 5 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("bts", &[_]u8{ 0x0F, 0xBA }, .{ .d = 5 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) } };
const instrsb3 = [_]Instruction{};
const instrsb4 = [_]Instruction{};
const instrsb = [_][]const Instruction{ &instrsb0, &instrsb1, &instrsb2, &instrsb3, &instrsb4 };

const instrsc0 = [_]Instruction{ Instruction{ .instr0 = Instr(0).init("cbw", &[_]u8{0x98}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("cwde", &[_]u8{0x98}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("cdqe", &[_]u8{0x98}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr0 = Instr(0).init("clc", &[_]u8{0xF8}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("cld", &[_]u8{0xFC}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("cli", &[_]u8{0xFA}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("clts", &[_]u8{ 0x0F, 0x06 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("cmc", &[_]u8{0xF5}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("cmpsb", &[_]u8{0xA6}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{ Prefix.Repez, Prefix.Repnez }, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("cmpsw", &[_]u8{0xA7}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{ Prefix.Repez, Prefix.Repnez }, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("cmpsd", &[_]u8{0xA7}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{ Prefix.Repez, Prefix.Repnez }, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("cmpsq", &[_]u8{0xA7}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr0 = Instr(0).init("cpuid", &[_]u8{ 0x0F, 0xA2 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("cwd", &[_]u8{0x99}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("cdq", &[_]u8{0x99}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("cqo", &[_]u8{0x99}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, &[_]Prefix{Prefix.RexW}) } };
const instrsc1 = [_]Instruction{ Instruction{ .instr1 = Instr(1).init("call", &[_]u8{0xE8}, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("call", &[_]u8{0xE8}, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("call", &[_]u8{0xFF}, .{ .d = 2 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("call", &[_]u8{0xFF}, .{ .d = 2 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem32 = undefined } } }}, @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("call", &[_]u8{0xFF}, .{ .d = 2 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem64 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("call", &[_]u8{0x9A}, .i, [1]Operand{.{ .pntr = .{ .pntr16_16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("call", &[_]u8{0x9A}, .i, [1]Operand{.{ .pntr = .{ .pntr16_32 = undefined } }}, @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 48, null, null) }, Instruction{ .instr1 = Instr(1).init("call", &[_]u8{0xFF}, .{ .d = 3 }, [1]Operand{.{ .mem = .{ .mem16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("call", &[_]u8{0xFF}, .{ .d = 3 }, [1]Operand{.{ .mem = .{ .mem48 = undefined } }}, @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 48, null, null) }, Instruction{ .instr1 = Instr(1).init("call", &[_]u8{0xFF}, .{ .d = 3 }, [1]Operand{.{ .mem = .{ .mem80 = undefined } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr1 = Instr(1).init("clflush", &[_]u8{ 0x0F, 0xAE }, .{ .d = 7 }, [1]Operand{.{ .mem = .{ .mem8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("clflushopt", &[_]u8{ 0x66, 0x0F, 0xAE }, .{ .d = 7 }, [1]Operand{.{ .mem = .{ .mem8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("cmpxchg8b", &[_]u8{ 0x0F, 0xC7 }, .{ .d = 1 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("cmpxchg16b", &[_]u8{ 0x0F, 0xC7 }, .{ .d = 1 }, [1]Operand{.{ .mem = .{ .mem128 = undefined } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 128, null, &[_]Prefix{Prefix.RexW}) } };
const instrsc2 = [_]Instruction{ Instruction{ .instr2 = Instr(2).init("cmova", &[_]u8{ 0x0F, 0x47 }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmova", &[_]u8{ 0x0F, 0x47 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmova", &[_]u8{ 0x0F, 0x47 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmovae", &[_]u8{ 0x0F, 0x43 }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmovae", &[_]u8{ 0x0F, 0x43 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmovae", &[_]u8{ 0x0F, 0x43 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmovb", &[_]u8{ 0x0F, 0x42 }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmovb", &[_]u8{ 0x0F, 0x42 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmovb", &[_]u8{ 0x0F, 0x42 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmovbe", &[_]u8{ 0x0F, 0x46 }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmovbe", &[_]u8{ 0x0F, 0x46 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmovbe", &[_]u8{ 0x0F, 0x46 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmovc", &[_]u8{ 0x0F, 0x42 }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmovc", &[_]u8{ 0x0F, 0x42 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmovc", &[_]u8{ 0x0F, 0x42 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmove", &[_]u8{ 0x0F, 0x44 }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmove", &[_]u8{ 0x0F, 0x44 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmove", &[_]u8{ 0x0F, 0x44 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmovg", &[_]u8{ 0x0F, 0x4F }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmovg", &[_]u8{ 0x0F, 0x4F }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmovg", &[_]u8{ 0x0F, 0x4F }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmovge", &[_]u8{ 0x0F, 0x4D }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmovge", &[_]u8{ 0x0F, 0x4D }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmovge", &[_]u8{ 0x0F, 0x4D }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmovl", &[_]u8{ 0x0F, 0x4C }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmovl", &[_]u8{ 0x0F, 0x4C }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmovl", &[_]u8{ 0x0F, 0x4C }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmovle", &[_]u8{ 0x0F, 0x4E }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmovle", &[_]u8{ 0x0F, 0x4E }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmovle", &[_]u8{ 0x0F, 0x4E }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmovna", &[_]u8{ 0x0F, 0x46 }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmovna", &[_]u8{ 0x0F, 0x46 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmovna", &[_]u8{ 0x0F, 0x46 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmovnae", &[_]u8{ 0x0F, 0x42 }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmovnae", &[_]u8{ 0x0F, 0x42 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmovnae", &[_]u8{ 0x0F, 0x42 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmovnb", &[_]u8{ 0x0F, 0x43 }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmovnb", &[_]u8{ 0x0F, 0x43 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmovnb", &[_]u8{ 0x0F, 0x43 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmovnbe", &[_]u8{ 0x0F, 0x47 }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmovnbe", &[_]u8{ 0x0F, 0x47 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmovnbe", &[_]u8{ 0x0F, 0x47 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmovnc", &[_]u8{ 0x0F, 0x43 }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmovnc", &[_]u8{ 0x0F, 0x43 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmovnc", &[_]u8{ 0x0F, 0x43 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmovne", &[_]u8{ 0x0F, 0x45 }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmovne", &[_]u8{ 0x0F, 0x45 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmovne", &[_]u8{ 0x0F, 0x45 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmovng", &[_]u8{ 0x0F, 0x4E }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmovng", &[_]u8{ 0x0F, 0x4E }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmovng", &[_]u8{ 0x0F, 0x4E }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmovnge", &[_]u8{ 0x0F, 0x4C }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmovnge", &[_]u8{ 0x0F, 0x4C }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmovnge", &[_]u8{ 0x0F, 0x4C }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmovnl", &[_]u8{ 0x0F, 0x4D }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmovnl", &[_]u8{ 0x0F, 0x4D }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmovnl", &[_]u8{ 0x0F, 0x4D }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmovnle", &[_]u8{ 0x0F, 0x4F }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmovnle", &[_]u8{ 0x0F, 0x4F }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmovnle", &[_]u8{ 0x0F, 0x4F }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmovno", &[_]u8{ 0x0F, 0x41 }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmovno", &[_]u8{ 0x0F, 0x41 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmovno", &[_]u8{ 0x0F, 0x41 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmovnp", &[_]u8{ 0x0F, 0x4B }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmovnp", &[_]u8{ 0x0F, 0x4B }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmovnp", &[_]u8{ 0x0F, 0x4B }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmovns", &[_]u8{ 0x0F, 0x49 }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmovns", &[_]u8{ 0x0F, 0x49 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmovns", &[_]u8{ 0x0F, 0x49 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmovnz", &[_]u8{ 0x0F, 0x45 }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmovnz", &[_]u8{ 0x0F, 0x45 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmovnz", &[_]u8{ 0x0F, 0x45 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmovo", &[_]u8{ 0x0F, 0x40 }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmovo", &[_]u8{ 0x0F, 0x40 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmovo", &[_]u8{ 0x0F, 0x40 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmovp", &[_]u8{ 0x0F, 0x4A }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmovp", &[_]u8{ 0x0F, 0x4A }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmovp", &[_]u8{ 0x0F, 0x4A }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmovpe", &[_]u8{ 0x0F, 0x4A }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmovpe", &[_]u8{ 0x0F, 0x4A }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmovpe", &[_]u8{ 0x0F, 0x4A }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmp", &[_]u8{0x3C}, .i, [2]Operand{ .{ .reg = .reg8A }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("cmp", &[_]u8{0x3D}, .i, [2]Operand{ .{ .reg = .reg16A }, .{ .imm = .{ .imm16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmp", &[_]u8{0x3D}, .i, [2]Operand{ .{ .reg = .reg32A }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmp", &[_]u8{0x3D}, .i, [2]Operand{ .{ .reg = .reg64A }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmp", &[_]u8{0x80}, .{ .d = 7 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("cmp", &[_]u8{0x80}, .{ .d = 7 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("cmp", &[_]u8{0x81}, .{ .d = 7 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmp", &[_]u8{0x81}, .{ .d = 7 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmp", &[_]u8{0x81}, .{ .d = 7 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmp", &[_]u8{0x83}, .{ .d = 7 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("cmp", &[_]u8{0x83}, .{ .d = 7 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmp", &[_]u8{0x83}, .{ .d = 7 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmp", &[_]u8{0x38}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("cmp", &[_]u8{0x38}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("cmp", &[_]u8{0x39}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg16Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmp", &[_]u8{0x39}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg32Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmp", &[_]u8{0x39}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg64Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmp", &[_]u8{0x3A}, .rm, [2]Operand{ .{ .reg = .{ .reg8Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("cmp", &[_]u8{0x3A}, .rm, [2]Operand{ .{ .reg = .{ .reg8Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("cmp", &[_]u8{0x3B}, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmp", &[_]u8{0x3B}, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmp", &[_]u8{0x3B}, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmps", &[_]u8{0xA6}, .po, [2]Operand{ .{ .mem = .{ .mem8 = undefined } }, .{ .mem = .{ .mem8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{ Prefix.Repez, Prefix.Repnez }, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("cmps", &[_]u8{0xA7}, .po, [2]Operand{ .{ .mem = .{ .mem16 = undefined } }, .{ .mem = .{ .mem16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{ Prefix.Repez, Prefix.Repnez }, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("cmps", &[_]u8{0xA7}, .po, [2]Operand{ .{ .mem = .{ .mem32 = undefined } }, .{ .mem = .{ .mem32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{ Prefix.Repez, Prefix.Repnez }, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmps", &[_]u8{0xA7}, .po, [2]Operand{ .{ .mem = .{ .mem64 = undefined } }, .{ .mem = .{ .mem64 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{ Prefix.Repez, Prefix.Repnez }, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cmpxchg", &[_]u8{ 0x0F, 0xB0 }, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("cmpxchg", &[_]u8{ 0x0F, 0xB0 }, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("cmpxchg", &[_]u8{ 0x0F, 0xB1 }, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg16Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("cmpxchg", &[_]u8{ 0x0F, 0xB1 }, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg32Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("cmpxchg", &[_]u8{ 0x0F, 0xB1 }, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg64Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("crc32", &[_]u8{ 0xF2, 0x0F, 0x38, 0xF0 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("crc32", &[_]u8{ 0xF2, 0x0F, 0x38, 0xF0 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("crc32", &[_]u8{ 0xF2, 0x0F, 0x38, 0xF1 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("crc32", &[_]u8{ 0xF2, 0x0F, 0x38, 0xF1 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("crc32", &[_]u8{ 0xF2, 0x0F, 0x38, 0xF0 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("crc32", &[_]u8{ 0xF2, 0x0F, 0x38, 0xF1 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("cvtpd2pi", &[_]u8{ 0x66, 0x0F, 0x2D }, .mr, [2]Operand{ .{ .mem = .{ .mem64 = undefined } }, .{ .rm = .{ .mem = .{ .mem128 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr2 = Instr(2).init("cvtpi2pd", &[_]u8{ 0x66, 0x0F, 0x2A }, .rm, [2]Operand{ .{ .reg = .{ .regXMM = undefined } }, .{ .mem = .{ .mem64 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 128, null, null) }, Instruction{ .instr2 = Instr(2).init("cvtpi2ps", &[_]u8{ 0x0F, 0x2A }, .rm, [2]Operand{ .{ .reg = .{ .regXMM = undefined } }, .{ .mem = .{ .mem64 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 128, null, null) }, Instruction{ .instr2 = Instr(2).init("cvtps2pi", &[_]u8{ 0x0F, 0x2D }, .mr, [2]Operand{ .{ .mem = .{ .mem64 = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr2 = Instr(2).init("cvttpd2pi", &[_]u8{ 0x66, 0x0F, 0x2C }, .mr, [2]Operand{ .{ .mem = .{ .mem64 = undefined } }, .{ .rm = .{ .mem = .{ .mem128 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr2 = Instr(2).init("cvttps2pi", &[_]u8{ 0x0F, 0x2C }, .mr, [2]Operand{ .{ .mem = .{ .mem64 = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) } };
const instrsc3 = [_]Instruction{};
const instrsc4 = [_]Instruction{};
const instrsc = [_][]const Instruction{ &instrsc0, &instrsc1, &instrsc2, &instrsc3, &instrsc4 };

const instrsd0 = [_]Instruction{ Instruction{ .instr0 = Instr(0).init("daa", &[_]u8{0x27}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("das", &[_]u8{0x2F}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) } };
const instrsd1 = [_]Instruction{ Instruction{ .instr1 = Instr(1).init("dec", &[_]u8{0xFE}, .{ .d = 1 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("dec", &[_]u8{0xFE}, .{ .d = 1 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("dec", &[_]u8{0xFF}, .{ .d = 1 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("dec", &[_]u8{0xFF}, .{ .d = 1 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem32 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("dec", &[_]u8{0xFF}, .{ .d = 1 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem64 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr1 = Instr(1).init("dec", &[_]u8{0x48}, .ri, [1]Operand{.{ .reg = .{ .reg16Gp = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr1 = Instr(1).init("dec", &[_]u8{0x48}, .ri, [1]Operand{.{ .reg = .{ .reg32Gp = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("div", &[_]u8{0xF6}, .{ .d = 6 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("div", &[_]u8{0xF6}, .{ .d = 6 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("div", &[_]u8{0xF7}, .{ .d = 6 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("div", &[_]u8{0xF7}, .{ .d = 6 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem32 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("div", &[_]u8{0xF7}, .{ .d = 6 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem64 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) } };
const instrsd2 = [_]Instruction{};
const instrsd3 = [_]Instruction{};
const instrsd4 = [_]Instruction{};
const instrsd = [_][]const Instruction{ &instrsd0, &instrsd1, &instrsd2, &instrsd3, &instrsd4 };

const instrse0 = [_]Instruction{Instruction{ .instr0 = Instr(0).init("emms", &[_]u8{ 0x0F, 0x77 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }};
const instrse1 = [_]Instruction{ Instruction{ .instr1 = Instr(1).init("enter", &[_]u8{ 0xC8, 0x00 }, .i, [1]Operand{.{ .imm = .{ .imm16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr1 = Instr(1).init("enter", &[_]u8{ 0xC8, 0x01 }, .i, [1]Operand{.{ .imm = .{ .imm16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) } };
const instrse2 = [_]Instruction{Instruction{ .instr2 = Instr(2).init("enter", &[_]u8{0xC8}, .i, [2]Operand{ .{ .imm = .{ .imm16 = undefined } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }};
const instrse3 = [_]Instruction{};
const instrse4 = [_]Instruction{};
const instrse = [_][]const Instruction{ &instrse0, &instrse1, &instrse2, &instrse3, &instrse4 };

const instrsf0 = [_]Instruction{ Instruction{ .instr0 = Instr(0).init("f2xm1", &[_]u8{ 0xD9, 0xF0 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fabs", &[_]u8{ 0xD9, 0xE1 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("faddp", &[_]u8{ 0xDE, 0xC1 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fchs", &[_]u8{ 0xD9, 0xE0 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fclex", &[_]u8{ 0x9B, 0xDB, 0xE2 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fnclex", &[_]u8{ 0xDB, 0xE2 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fcom", &[_]u8{ 0xD8, 0xD1 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fcomp", &[_]u8{ 0xD8, 0xD9 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fcompp", &[_]u8{ 0xDE, 0xD9 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fcos", &[_]u8{ 0xD9, 0xFF }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fdecstp", &[_]u8{ 0xD9, 0xF6 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fdivp", &[_]u8{ 0xDE, 0xF9 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fdivrp", &[_]u8{ 0xDE, 0xF1 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fincstp", &[_]u8{ 0xD9, 0xF7 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("finit", &[_]u8{ 0x9B, 0xDB, 0xE3 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fninit", &[_]u8{ 0xDB, 0xE3 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fld1", &[_]u8{ 0xD9, 0xE8 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fldl2t", &[_]u8{ 0xD9, 0xE9 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fldl2e", &[_]u8{ 0xD9, 0xEA }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fldpi", &[_]u8{ 0xD9, 0xEB }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fldlg2", &[_]u8{ 0xD9, 0xEC }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fldln2", &[_]u8{ 0xD9, 0xED }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fldz", &[_]u8{ 0xD9, 0xEE }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fmulp", &[_]u8{ 0xDE, 0xC9 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fnop", &[_]u8{ 0xD9, 0xD0 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fpatan", &[_]u8{ 0xD9, 0xF3 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fprem", &[_]u8{ 0xD9, 0xF8 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fprem1", &[_]u8{ 0xD9, 0xF5 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fptan", &[_]u8{ 0xD9, 0xF2 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("frndint", &[_]u8{ 0xD9, 0xFC }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fscale", &[_]u8{ 0xD9, 0xFD }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fsin", &[_]u8{ 0xD9, 0xFE }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fsincos", &[_]u8{ 0xD9, 0xFB }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fsqrt", &[_]u8{ 0xD9, 0xFA }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fsubp", &[_]u8{ 0xDE, 0xE9 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fsubrp", &[_]u8{ 0xDE, 0xE1 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("ftst", &[_]u8{ 0xD9, 0xE4 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fucom", &[_]u8{ 0xDD, 0xE1 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fucomp", &[_]u8{ 0xDD, 0xE9 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fucompp", &[_]u8{ 0xDA, 0xE9 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fxam", &[_]u8{ 0xD9, 0xE5 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fxch", &[_]u8{ 0xD9, 0xC9 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fxtract", &[_]u8{ 0xD9, 0xF4 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fyl2x", &[_]u8{ 0xD9, 0xF1 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fyl2xp1", &[_]u8{ 0xD9, 0xF9 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("fwait", &[_]u8{0x9B}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) } };
const instrsf1 = [_]Instruction{ Instruction{ .instr1 = Instr(1).init("fadd", &[_]u8{0xD8}, .{ .d = 0 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("fadd", &[_]u8{0xDC}, .{ .d = 0 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("fiadd", &[_]u8{0xDA}, .{ .d = 0 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("fiadd", &[_]u8{0xDE}, .{ .d = 0 }, [1]Operand{.{ .mem = .{ .mem16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("fbld", &[_]u8{0xDF}, .{ .d = 4 }, [1]Operand{.{ .mem = .{ .mem80 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr1 = Instr(1).init("fbstp", &[_]u8{0xDF}, .{ .d = 6 }, [1]Operand{.{ .mem = .{ .mem80 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr1 = Instr(1).init("fcom", &[_]u8{0xD8}, .{ .d = 2 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("fcom", &[_]u8{0xDC}, .{ .d = 2 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("fcom", &[_]u8{ 0xD8, 0xD0 }, .ri, [1]Operand{.{ .reg = .{ .regST = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr1 = Instr(1).init("fcomp", &[_]u8{0xD8}, .{ .d = 3 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("fcomp", &[_]u8{0xDC}, .{ .d = 3 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("fcomp", &[_]u8{ 0xD8, 0xD8 }, .ri, [1]Operand{.{ .reg = .{ .regST = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr1 = Instr(1).init("fdiv", &[_]u8{0xD8}, .{ .d = 6 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("fdiv", &[_]u8{0xDC}, .{ .d = 6 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("fidiv", &[_]u8{0xDA}, .{ .d = 6 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("fidiv", &[_]u8{0xDE}, .{ .d = 6 }, [1]Operand{.{ .mem = .{ .mem16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("fdivr", &[_]u8{0xD8}, .{ .d = 7 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("fdivr", &[_]u8{0xDC}, .{ .d = 7 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("fidivr", &[_]u8{0xDA}, .{ .d = 7 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("fidivr", &[_]u8{0xDE}, .{ .d = 7 }, [1]Operand{.{ .mem = .{ .mem16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("ffree", &[_]u8{ 0xDD, 0xC0 }, .ri, [1]Operand{.{ .reg = .{ .regST = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr1 = Instr(1).init("ficom", &[_]u8{0xDE}, .{ .d = 2 }, [1]Operand{.{ .mem = .{ .mem16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("ficom", &[_]u8{0xDA}, .{ .d = 2 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("ficomp", &[_]u8{0xDE}, .{ .d = 3 }, [1]Operand{.{ .mem = .{ .mem16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("ficomp", &[_]u8{0xDA}, .{ .d = 3 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("fild", &[_]u8{0xDF}, .{ .d = 0 }, [1]Operand{.{ .mem = .{ .mem16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("fild", &[_]u8{0xDB}, .{ .d = 0 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("fild", &[_]u8{0xDF}, .{ .d = 5 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("fist", &[_]u8{0xDF}, .{ .d = 2 }, [1]Operand{.{ .mem = .{ .mem16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("fist", &[_]u8{0xDB}, .{ .d = 2 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("fistp", &[_]u8{0xDF}, .{ .d = 3 }, [1]Operand{.{ .mem = .{ .mem16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("fistp", &[_]u8{0xDB}, .{ .d = 3 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("fistp", &[_]u8{0xDF}, .{ .d = 7 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("fisttp", &[_]u8{0xDF}, .{ .d = 1 }, [1]Operand{.{ .mem = .{ .mem16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("fisttp", &[_]u8{0xDB}, .{ .d = 1 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("fisttp", &[_]u8{0xDD}, .{ .d = 1 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("fld", &[_]u8{0xD9}, .{ .d = 0 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("fld", &[_]u8{0xDD}, .{ .d = 0 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("fld", &[_]u8{0xDB}, .{ .d = 5 }, [1]Operand{.{ .mem = .{ .mem80 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr1 = Instr(1).init("fld", &[_]u8{ 0xD9, 0xC0 }, .ri, [1]Operand{.{ .reg = .{ .regST = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr1 = Instr(1).init("fldcw", &[_]u8{0xD9}, .{ .d = 5 }, [1]Operand{.{ .mem = .{ .mem16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("fldenv", &[_]u8{0xD9}, .{ .d = 4 }, [1]Operand{.{ .mem = .{ .mem14m28 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 28, null, null) }, Instruction{ .instr1 = Instr(1).init("fmul", &[_]u8{0xD8}, .{ .d = 1 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("fmul", &[_]u8{0xDC}, .{ .d = 1 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("fimul", &[_]u8{0xDA}, .{ .d = 1 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("fimul", &[_]u8{0xDE}, .{ .d = 1 }, [1]Operand{.{ .mem = .{ .mem16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("frstor", &[_]u8{0xDD}, .{ .d = 4 }, [1]Operand{.{ .mem = .{ .mem94m108 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 108, null, null) }, Instruction{ .instr1 = Instr(1).init("fsave", &[_]u8{ 0x9B, 0xDD }, .{ .d = 6 }, [1]Operand{.{ .mem = .{ .mem94m108 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 108, null, null) }, Instruction{ .instr1 = Instr(1).init("fnsave", &[_]u8{0xDD}, .{ .d = 6 }, [1]Operand{.{ .mem = .{ .mem94m108 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 108, null, null) }, Instruction{ .instr1 = Instr(1).init("fst", &[_]u8{0xD9}, .{ .d = 2 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("fst", &[_]u8{0xDD}, .{ .d = 2 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("fst", &[_]u8{ 0xDD, 0xD0 }, .ri, [1]Operand{.{ .reg = .{ .regST = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr1 = Instr(1).init("fstp", &[_]u8{0xD9}, .{ .d = 3 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("fstp", &[_]u8{0xDD}, .{ .d = 3 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("fstp", &[_]u8{0xDB}, .{ .d = 7 }, [1]Operand{.{ .mem = .{ .mem80 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr1 = Instr(1).init("fstp", &[_]u8{ 0xDD, 0xD8 }, .ri, [1]Operand{.{ .reg = .{ .regST = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr1 = Instr(1).init("fstcw", &[_]u8{ 0x9B, 0xD9 }, .{ .d = 7 }, [1]Operand{.{ .mem = .{ .mem16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("fnstcw", &[_]u8{0xD9}, .{ .d = 7 }, [1]Operand{.{ .mem = .{ .mem16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("fstenv", &[_]u8{ 0x9B, 0xD9 }, .{ .d = 6 }, [1]Operand{.{ .mem = .{ .mem14m28 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 28, null, null) }, Instruction{ .instr1 = Instr(1).init("fnstenv", &[_]u8{0xD9}, .{ .d = 6 }, [1]Operand{.{ .mem = .{ .mem14m28 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 28, null, null) }, Instruction{ .instr1 = Instr(1).init("fstsw", &[_]u8{ 0x9B, 0xDD }, .{ .d = 7 }, [1]Operand{.{ .mem = .{ .mem16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("fstsw", &[_]u8{ 0x9B, 0xDF, 0xE0 }, .po, [1]Operand{.{ .reg = .reg16A }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr1 = Instr(1).init("fnstsw", &[_]u8{0xDD}, .{ .d = 7 }, [1]Operand{.{ .mem = .{ .mem16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("fnstsw", &[_]u8{ 0xDF, 0xE0 }, .po, [1]Operand{.{ .reg = .reg16A }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr1 = Instr(1).init("fsub", &[_]u8{0xD8}, .{ .d = 4 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("fsub", &[_]u8{0xDC}, .{ .d = 4 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("fisub", &[_]u8{0xDA}, .{ .d = 4 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("fisub", &[_]u8{0xDE}, .{ .d = 4 }, [1]Operand{.{ .mem = .{ .mem16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("fsubr", &[_]u8{0xD8}, .{ .d = 5 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("fsubr", &[_]u8{0xDC}, .{ .d = 5 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("fisubr", &[_]u8{0xDA}, .{ .d = 5 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("fisubr", &[_]u8{0xDE}, .{ .d = 5 }, [1]Operand{.{ .mem = .{ .mem16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("fucom", &[_]u8{ 0xDD, 0xE0 }, .ri, [1]Operand{.{ .reg = .{ .regST = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr1 = Instr(1).init("fucomp", &[_]u8{ 0xDD, 0xE8 }, .ri, [1]Operand{.{ .reg = .{ .regST = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr1 = Instr(1).init("fxch", &[_]u8{ 0xD9, 0xC8 }, .ri, [1]Operand{.{ .reg = .{ .regST = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr1 = Instr(1).init("fxrstor", &[_]u8{ 0x0F, 0xAE }, .{ .d = 1 }, [1]Operand{.{ .mem = .{ .mem512 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 512, null, null) }, Instruction{ .instr1 = Instr(1).init("fxrstor64", &[_]u8{ 0x0F, 0xAE }, .{ .d = 1 }, [1]Operand{.{ .mem = .{ .mem512 = undefined } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 512, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr1 = Instr(1).init("fxsave", &[_]u8{ 0x0F, 0xAE }, .{ .d = 0 }, [1]Operand{.{ .mem = .{ .mem512 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 512, null, null) }, Instruction{ .instr1 = Instr(1).init("fxsave64", &[_]u8{ 0x0F, 0xAE }, .{ .d = 0 }, [1]Operand{.{ .mem = .{ .mem512 = undefined } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 512, null, &[_]Prefix{Prefix.RexW}) } };
const instrsf2 = [_]Instruction{ Instruction{ .instr2 = Instr(2).init("fadd", &[_]u8{ 0xD8, 0xC0 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fadd", &[_]u8{ 0xDC, 0xC0 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("faddp", &[_]u8{ 0xDE, 0xC0 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fcmovb", &[_]u8{ 0xDA, 0xC0 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fcmove", &[_]u8{ 0xDA, 0xC8 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fcmovbe", &[_]u8{ 0xDA, 0xD0 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fcmovu", &[_]u8{ 0xDA, 0xD8 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fcmovnb", &[_]u8{ 0xDB, 0xC0 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fcmovne", &[_]u8{ 0xDB, 0xC8 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fcmovnbe", &[_]u8{ 0xDB, 0xD0 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fcmovnu", &[_]u8{ 0xDB, 0xD8 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fcomi", &[_]u8{ 0xDB, 0xF0 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fcomip", &[_]u8{ 0xDF, 0xF0 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fucomi", &[_]u8{ 0xDB, 0xE8 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fucomip", &[_]u8{ 0xDF, 0xE8 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fdiv", &[_]u8{ 0xD8, 0xF0 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fdiv", &[_]u8{ 0xDC, 0xF8 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fdivp", &[_]u8{ 0xDE, 0xF8 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fdivr", &[_]u8{ 0xD8, 0xF8 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fdivr", &[_]u8{ 0xDC, 0xF0 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fdivrp", &[_]u8{ 0xDE, 0xF0 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fmul", &[_]u8{ 0xD8, 0xC8 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fmul", &[_]u8{ 0xDC, 0xC8 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fmulp", &[_]u8{ 0xDE, 0xC8 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fsub", &[_]u8{ 0xD8, 0xE0 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fsub", &[_]u8{ 0xDC, 0xE8 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fsubp", &[_]u8{ 0xDE, 0xE8 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fsubr", &[_]u8{ 0xD8, 0xE8 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fsubr", &[_]u8{ 0xDC, 0xE0 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) }, Instruction{ .instr2 = Instr(2).init("fsubrp", &[_]u8{ 0xDE, 0xE0 }, .ri, [2]Operand{ .{ .reg = .{ .regST = undefined } }, .{ .reg = .{ .regST = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, null) } };
const instrsf3 = [_]Instruction{};
const instrsf4 = [_]Instruction{};
const instrsf = [_][]const Instruction{ &instrsf0, &instrsf1, &instrsf2, &instrsf3, &instrsf4 };

const instrsg0 = [_]Instruction{};
const instrsg1 = [_]Instruction{};
const instrsg2 = [_]Instruction{};
const instrsg3 = [_]Instruction{};
const instrsg4 = [_]Instruction{};
const instrsg = [_][]const Instruction{ &instrsg0, &instrsg1, &instrsg2, &instrsg3, &instrsg4 };

const instrsh0 = [_]Instruction{Instruction{ .instr0 = Instr(0).init("hlt", &[_]u8{0xF4}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }};
const instrsh1 = [_]Instruction{};
const instrsh2 = [_]Instruction{};
const instrsh3 = [_]Instruction{};
const instrsh4 = [_]Instruction{};
const instrsh = [_][]const Instruction{ &instrsh0, &instrsh1, &instrsh2, &instrsh3, &instrsh4 };

const instrsi0 = [_]Instruction{ Instruction{ .instr0 = Instr(0).init("insb", &[_]u8{0x6C}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("insw", &[_]u8{0x6D}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("insd", &[_]u8{0x6D}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("int", &[_]u8{0xCC}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("into", &[_]u8{0xCE}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("invd", &[_]u8{ 0x0F, 0x08 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("iret", &[_]u8{0xCF}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("iretd", &[_]u8{0xCF}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("iretq", &[_]u8{0xCF}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, &[_]Prefix{Prefix.RexW}) } };
const instrsi1 = [_]Instruction{ Instruction{ .instr1 = Instr(1).init("idiv", &[_]u8{0xF6}, .{ .d = 7 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("idiv", &[_]u8{0xF6}, .{ .d = 7 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("idiv", &[_]u8{0xF7}, .{ .d = 7 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("idiv", &[_]u8{0xF7}, .{ .d = 7 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem32 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("idiv", &[_]u8{0xF7}, .{ .d = 7 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem64 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr1 = Instr(1).init("imul", &[_]u8{0xF6}, .{ .d = 5 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("imul", &[_]u8{0xF7}, .{ .d = 5 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("imul", &[_]u8{0xF7}, .{ .d = 5 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem32 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("imul", &[_]u8{0xF7}, .{ .d = 5 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem64 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr1 = Instr(1).init("inc", &[_]u8{0xFE}, .{ .d = 0 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("inc", &[_]u8{0xFE}, .{ .d = 0 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("inc", &[_]u8{0xFF}, .{ .d = 0 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("inc", &[_]u8{0xFF}, .{ .d = 0 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem32 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("inc", &[_]u8{0xFF}, .{ .d = 0 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem64 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr1 = Instr(1).init("inc", &[_]u8{0x40}, .ri, [1]Operand{.{ .reg = .{ .reg16Gp = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr1 = Instr(1).init("inc", &[_]u8{0x40}, .ri, [1]Operand{.{ .reg = .{ .reg32Gp = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("invlpg", &[_]u8{ 0x0F, 0x01 }, .{ .d = 7 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) } };
const instrsi2 = [_]Instruction{ Instruction{ .instr2 = Instr(2).init("imul", &[_]u8{ 0x0F, 0xAF }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("imul", &[_]u8{ 0x0F, 0xAF }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("imul", &[_]u8{ 0x0F, 0xAF }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("in", &[_]u8{0xE4}, .i, [2]Operand{ .{ .reg = .reg8A }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("in", &[_]u8{0xE5}, .i, [2]Operand{ .{ .reg = .reg16A }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("in", &[_]u8{0xE5}, .i, [2]Operand{ .{ .reg = .reg32A }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("in", &[_]u8{0xEC}, .po, [2]Operand{ .{ .reg = .reg8A }, .{ .reg = .{ .reg16Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("in", &[_]u8{0xED}, .po, [2]Operand{ .{ .reg = .reg16A }, .{ .reg = .{ .reg16Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("in", &[_]u8{0xED}, .po, [2]Operand{ .{ .reg = .reg32A }, .{ .reg = .{ .reg16Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("ins", &[_]u8{0x6C}, .po, [2]Operand{ .{ .mem = .{ .mem8 = undefined } }, .{ .reg = .{ .reg16Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Repez}, 8, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("ins", &[_]u8{0x6D}, .po, [2]Operand{ .{ .mem = .{ .mem16 = undefined } }, .{ .reg = .{ .reg16Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Repez}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("ins", &[_]u8{0x6D}, .po, [2]Operand{ .{ .mem = .{ .mem32 = undefined } }, .{ .reg = .{ .reg16Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Repez}, 32, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) } };
const instrsi3 = [_]Instruction{ Instruction{ .instr3 = Instr(3).init("imul", &[_]u8{0x6B}, .rm, [3]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr3 = Instr(3).init("imul", &[_]u8{0x6B}, .rm, [3]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr3 = Instr(3).init("imul", &[_]u8{0x6B}, .rm, [3]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr3 = Instr(3).init("imul", &[_]u8{0x69}, .rm, [3]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr3 = Instr(3).init("imul", &[_]u8{0x69}, .rm, [3]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr3 = Instr(3).init("imul", &[_]u8{0x69}, .rm, [3]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) } };
const instrsi4 = [_]Instruction{};
const instrsi = [_][]const Instruction{ &instrsi0, &instrsi1, &instrsi2, &instrsi3, &instrsi4 };

const instrsj0 = [_]Instruction{};
const instrsj1 = [_]Instruction{ Instruction{ .instr1 = Instr(1).init("ja", &[_]u8{0x77}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jae", &[_]u8{0x73}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jb", &[_]u8{0x72}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jbe", &[_]u8{0x76}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jc", &[_]u8{0x72}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jcxz", &[_]u8{0xE3}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jecxz", &[_]u8{0xE3}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jrcxz", &[_]u8{0xE3}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("je", &[_]u8{0x74}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jg", &[_]u8{0x7F}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jge", &[_]u8{0x7D}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jl", &[_]u8{0x7C}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jle", &[_]u8{0x7E}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jna", &[_]u8{0x76}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jnae", &[_]u8{0x72}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jnb", &[_]u8{0x73}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jnbe", &[_]u8{0x77}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jnc", &[_]u8{0x73}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jne", &[_]u8{0x75}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jng", &[_]u8{0x7E}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jnge", &[_]u8{0x7C}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jnl", &[_]u8{0x7D}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jnle", &[_]u8{0x7F}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jno", &[_]u8{0x71}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jnp", &[_]u8{0x7B}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jns", &[_]u8{0x79}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jnz", &[_]u8{0x75}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jo", &[_]u8{0x70}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jp", &[_]u8{0x7A}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jpe", &[_]u8{0x7A}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jpo", &[_]u8{0x7B}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("js", &[_]u8{0x78}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jz", &[_]u8{0x74}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("ja", &[_]u8{ 0x0F, 0x87 }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("ja", &[_]u8{ 0x0F, 0x87 }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jae", &[_]u8{ 0x0F, 0x83 }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jae", &[_]u8{ 0x0F, 0x83 }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jb", &[_]u8{ 0x0F, 0x82 }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jb", &[_]u8{ 0x0F, 0x82 }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jbe", &[_]u8{ 0x0F, 0x86 }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jbe", &[_]u8{ 0x0F, 0x86 }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jc", &[_]u8{ 0x0F, 0x82 }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jc", &[_]u8{ 0x0F, 0x82 }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("je", &[_]u8{ 0x0F, 0x84 }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("je", &[_]u8{ 0x0F, 0x84 }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jz", &[_]u8{ 0x0F, 0x84 }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jz", &[_]u8{ 0x0F, 0x84 }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jg", &[_]u8{ 0x0F, 0x8F }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jg", &[_]u8{ 0x0F, 0x8F }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jge", &[_]u8{ 0x0F, 0x8D }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jge", &[_]u8{ 0x0F, 0x8D }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jl", &[_]u8{ 0x0F, 0x8C }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jl", &[_]u8{ 0x0F, 0x8C }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jle", &[_]u8{ 0x0F, 0x8E }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jle", &[_]u8{ 0x0F, 0x8E }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jna", &[_]u8{ 0x0F, 0x86 }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jna", &[_]u8{ 0x0F, 0x86 }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jnae", &[_]u8{ 0x0F, 0x82 }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jnae", &[_]u8{ 0x0F, 0x82 }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jnb", &[_]u8{ 0x0F, 0x83 }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jnb", &[_]u8{ 0x0F, 0x83 }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jnbe", &[_]u8{ 0x0F, 0x87 }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jnbe", &[_]u8{ 0x0F, 0x87 }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jnc", &[_]u8{ 0x0F, 0x83 }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jnc", &[_]u8{ 0x0F, 0x83 }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jne", &[_]u8{ 0x0F, 0x85 }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jne", &[_]u8{ 0x0F, 0x85 }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jng", &[_]u8{ 0x0F, 0x8E }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jng", &[_]u8{ 0x0F, 0x8E }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jnge", &[_]u8{ 0x0F, 0x8C }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jnge", &[_]u8{ 0x0F, 0x8C }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jnl", &[_]u8{ 0x0F, 0x8D }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jnl", &[_]u8{ 0x0F, 0x8D }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jnle", &[_]u8{ 0x0F, 0x8F }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jnle", &[_]u8{ 0x0F, 0x8F }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jno", &[_]u8{ 0x0F, 0x81 }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jno", &[_]u8{ 0x0F, 0x81 }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jnp", &[_]u8{ 0x0F, 0x8B }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jnp", &[_]u8{ 0x0F, 0x8B }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jns", &[_]u8{ 0x0F, 0x89 }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jns", &[_]u8{ 0x0F, 0x89 }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jnz", &[_]u8{ 0x0F, 0x85 }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jnz", &[_]u8{ 0x0F, 0x85 }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jo", &[_]u8{ 0x0F, 0x80 }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jo", &[_]u8{ 0x0F, 0x80 }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jp", &[_]u8{ 0x0F, 0x8A }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jp", &[_]u8{ 0x0F, 0x8A }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jpe", &[_]u8{ 0x0F, 0x8A }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jpe", &[_]u8{ 0x0F, 0x8A }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jpo", &[_]u8{ 0x0F, 0x8B }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jpo", &[_]u8{ 0x0F, 0x8B }, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("js", &[_]u8{ 0x0F, 0x88 }, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jmp", &[_]u8{0xEB}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("jmp", &[_]u8{0xE9}, .i, [1]Operand{.{ .rel = .{ .rel16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jmp", &[_]u8{0xE9}, .i, [1]Operand{.{ .rel = .{ .rel32 = undefined } }}, @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jmp", &[_]u8{0xFF}, .{ .d = 4 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jmp", &[_]u8{0xFF}, .{ .d = 4 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem32 = undefined } } }}, @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jmp", &[_]u8{0xFF}, .{ .d = 4 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem64 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("jmp", &[_]u8{0xEA}, .i, [1]Operand{.{ .pntr = .{ .pntr16_16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("jmp", &[_]u8{0xEA}, .i, [1]Operand{.{ .pntr = .{ .pntr16_32 = undefined } }}, @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 48, null, null) }, Instruction{ .instr1 = Instr(1).init("jmp", &[_]u8{0xFF}, .{ .d = 5 }, [1]Operand{.{ .mem = .{ .mem16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("jmp", &[_]u8{0xFF}, .{ .d = 5 }, [1]Operand{.{ .mem = .{ .mem48 = undefined } }}, @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 48, null, null) }, Instruction{ .instr1 = Instr(1).init("jmp", &[_]u8{0xFF}, .{ .d = 5 }, [1]Operand{.{ .mem = .{ .mem80 = undefined } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 80, null, &[_]Prefix{Prefix.RexW}) } };
const instrsj2 = [_]Instruction{};
const instrsj3 = [_]Instruction{};
const instrsj4 = [_]Instruction{};
const instrsj = [_][]const Instruction{ &instrsj0, &instrsj1, &instrsj2, &instrsj3, &instrsj4 };

const instrsk0 = [_]Instruction{};
const instrsk1 = [_]Instruction{};
const instrsk2 = [_]Instruction{};
const instrsk3 = [_]Instruction{};
const instrsk4 = [_]Instruction{};
const instrsk = [_][]const Instruction{ &instrsk0, &instrsk1, &instrsk2, &instrsk3, &instrsk4 };

const instrsl0 = [_]Instruction{ Instruction{ .instr0 = Instr(0).init("lahf", &[_]u8{0x9F}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("leave", &[_]u8{0xC9}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("leave", &[_]u8{0xC9}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("leave", &[_]u8{0xC9}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("lfence", &[_]u8{ 0x0F, 0xAE, 0xE8 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("lock", &[_]u8{0xF0}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("lodsb", &[_]u8{0xAC}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("lodsw", &[_]u8{0xAD}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("lodsd", &[_]u8{0xAD}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("lodsq", &[_]u8{0xAD}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, &[_]Prefix{Prefix.RexW}) } };
const instrsl1 = [_]Instruction{ Instruction{ .instr1 = Instr(1).init("lgdt", &[_]u8{ 0x0F, 0x01 }, .{ .d = 2 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("lidt", &[_]u8{ 0x0F, 0x01 }, .{ .d = 3 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("lgdt", &[_]u8{ 0x0F, 0x01 }, .{ .d = 2 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("lidt", &[_]u8{ 0x0F, 0x01 }, .{ .d = 3 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("lldt", &[_]u8{ 0x0F, 0x00 }, .{ .d = 2 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("lmsw", &[_]u8{ 0x0F, 0x01 }, .{ .d = 6 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("lods", &[_]u8{0xAC}, .po, [1]Operand{.{ .mem = .{ .mem8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Repez}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("lods", &[_]u8{0xAD}, .po, [1]Operand{.{ .mem = .{ .mem16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Repez}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("lods", &[_]u8{0xAD}, .po, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Repez}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("lods", &[_]u8{0xAD}, .po, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Repez}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr1 = Instr(1).init("loop", &[_]u8{0xE2}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("loope", &[_]u8{0xE1}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("loopne", &[_]u8{0xE0}, .i, [1]Operand{.{ .rel = .{ .rel8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("ltr", &[_]u8{ 0x0F, 0x00 }, .{ .d = 3 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) } };
const instrsl2 = [_]Instruction{ Instruction{ .instr2 = Instr(2).init("lar", &[_]u8{ 0x0F, 0x02 }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("lar", &[_]u8{ 0x0F, 0x02 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr2 = Instr(2).init("lds", &[_]u8{0xC5}, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .mem = .{ .mem16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("lds", &[_]u8{0xC5}, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .mem = .{ .mem48 = undefined } } }, @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("lss", &[_]u8{ 0x0F, 0xB2 }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .mem = .{ .mem16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("lss", &[_]u8{ 0x0F, 0xB2 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .mem = .{ .mem48 = undefined } } }, @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("lss", &[_]u8{ 0x0F, 0xB2 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .mem = .{ .mem80 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("les", &[_]u8{0xC4}, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .mem = .{ .mem16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("les", &[_]u8{0xC4}, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .mem = .{ .mem48 = undefined } } }, @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("lfs", &[_]u8{ 0x0F, 0xB4 }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .mem = .{ .mem16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("lfs", &[_]u8{ 0x0F, 0xB4 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .mem = .{ .mem48 = undefined } } }, @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("lfs", &[_]u8{ 0x0F, 0xB4 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .mem = .{ .mem80 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("lgs", &[_]u8{ 0x0F, 0xB5 }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .mem = .{ .mem16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("lgs", &[_]u8{ 0x0F, 0xB5 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .mem = .{ .mem48 = undefined } } }, @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("lgs", &[_]u8{ 0x0F, 0xB5 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .mem = .{ .mem80 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("lea", &[_]u8{0x8D}, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .mem = .{ .mem32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("lea", &[_]u8{0x8D}, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .mem = .{ .mem32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("lea", &[_]u8{0x8D}, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .mem = .{ .mem32 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("lsl", &[_]u8{ 0x0F, 0x03 }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("lsl", &[_]u8{ 0x0F, 0x03 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("lsl", &[_]u8{ 0x0F, 0x03 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) } };
const instrsl3 = [_]Instruction{};
const instrsl4 = [_]Instruction{};
const instrsl = [_][]const Instruction{ &instrsl0, &instrsl1, &instrsl2, &instrsl3, &instrsl4 };

const instrsm0 = [_]Instruction{ Instruction{ .instr0 = Instr(0).init("mfence", &[_]u8{ 0x0F, 0xAE, 0xF0 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("monitor", &[_]u8{ 0x0F, 0x01, 0xC8 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("movsb", &[_]u8{0xA4}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("movsw", &[_]u8{0xA5}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("movsd", &[_]u8{0xA5}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("movsq", &[_]u8{0xA5}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr0 = Instr(0).init("mwait", &[_]u8{ 0x0F, 0x01, 0xC9 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) } };
const instrsm1 = [_]Instruction{ Instruction{ .instr1 = Instr(1).init("mul", &[_]u8{0xF6}, .{ .d = 4 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("mul", &[_]u8{0xF6}, .{ .d = 4 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("mul", &[_]u8{0xF7}, .{ .d = 4 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("mul", &[_]u8{0xF7}, .{ .d = 4 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem32 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("mul", &[_]u8{0xF7}, .{ .d = 4 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem64 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) } };
const instrsm2 = [_]Instruction{ Instruction{ .instr2 = Instr(2).init("maskmovq", &[_]u8{ 0x0F, 0xF7 }, .rm, [2]Operand{ .{ .reg = .{ .regXMM = undefined } }, .{ .reg = .{ .regXMM = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 128, null, null) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0x88}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0x88}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0x89}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg16Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0x89}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg32Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0x89}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg64Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0x8A}, .rm, [2]Operand{ .{ .reg = .{ .reg8Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0x8A}, .rm, [2]Operand{ .{ .reg = .{ .reg8Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0x8B}, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0x8B}, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0x8B}, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0x8C}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .regSS } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0x8C}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .regSS } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0x8E}, .rm, [2]Operand{ .{ .reg = .regSS }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0x8E}, .rm, [2]Operand{ .{ .reg = .regSS }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0xA0}, .rmo, [2]Operand{ .{ .reg = .reg8A }, .{ .mofst = .{ .mofst8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0xA0}, .rmo, [2]Operand{ .{ .reg = .reg8A }, .{ .mofst = .{ .mofst8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0xA1}, .rmo, [2]Operand{ .{ .reg = .reg16A }, .{ .mofst = .{ .mofst16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0xA1}, .rmo, [2]Operand{ .{ .reg = .reg32A }, .{ .mofst = .{ .mofst32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0xA1}, .rmo, [2]Operand{ .{ .reg = .reg64A }, .{ .mofst = .{ .mofst64 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0xA2}, .mor, [2]Operand{ .{ .mofst = .{ .mofst8 = undefined } }, .{ .reg = .reg8A } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0xA2}, .mor, [2]Operand{ .{ .mofst = .{ .mofst8 = undefined } }, .{ .reg = .reg8A } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0xA3}, .mor, [2]Operand{ .{ .mofst = .{ .mofst16 = undefined } }, .{ .reg = .reg16A } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0xA3}, .mor, [2]Operand{ .{ .mofst = .{ .mofst32 = undefined } }, .{ .reg = .reg32A } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0xA3}, .mor, [2]Operand{ .{ .mofst = .{ .mofst64 = undefined } }, .{ .reg = .reg64A } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0xB0}, .ri, [2]Operand{ .{ .reg = .{ .reg8Gp = undefined } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0xB0}, .ri, [2]Operand{ .{ .reg = .{ .reg8Gp = undefined } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0xB8}, .ri, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .imm = .{ .imm16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0xB8}, .ri, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0xB8}, .ri, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .imm = .{ .imm64 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0xC6}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0xC6}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0xC7}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0xC7}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{0xC7}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{ 0x0F, 0x20 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .reg = .{ .regCR = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{ 0x0F, 0x20 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .reg = .{ .regCR = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{ 0x0F, 0x20 }, .{ .d = 0 }, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .reg = .{ .regCR = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexR}) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{ 0x0F, 0x22 }, .rm, [2]Operand{ .{ .reg = .{ .regCR = undefined } }, .{ .reg = .{ .reg32Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{ 0x0F, 0x22 }, .rm, [2]Operand{ .{ .reg = .{ .regCR = undefined } }, .{ .reg = .{ .reg64Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{ 0x0F, 0x22 }, .{ .d = 0 }, [2]Operand{ .{ .reg = .{ .regCR = undefined } }, .{ .reg = .{ .reg64Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, &[_]Prefix{Prefix.RexR}) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{ 0x0F, 0x21 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .reg = .{ .regCR = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{ 0x0F, 0x21 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .reg = .{ .regCR = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{ 0x0F, 0x23 }, .rm, [2]Operand{ .{ .reg = .{ .regCR = undefined } }, .{ .reg = .{ .reg32Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("mov", &[_]u8{ 0x0F, 0x23 }, .rm, [2]Operand{ .{ .reg = .{ .regCR = undefined } }, .{ .reg = .{ .reg64Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("movbe", &[_]u8{ 0x0F, 0x38, 0xF0 }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .mem = .{ .mem16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("movbe", &[_]u8{ 0x0F, 0x38, 0xF0 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .mem = .{ .mem32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("movbe", &[_]u8{ 0x0F, 0x38, 0xF0 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .mem = .{ .mem64 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("movbe", &[_]u8{ 0x0F, 0x38, 0xF1 }, .mr, [2]Operand{ .{ .mem = .{ .mem16 = undefined } }, .{ .reg = .{ .reg16Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("movbe", &[_]u8{ 0x0F, 0x38, 0xF1 }, .mr, [2]Operand{ .{ .mem = .{ .mem32 = undefined } }, .{ .reg = .{ .reg32Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("movbe", &[_]u8{ 0x0F, 0x38, 0xF1 }, .mr, [2]Operand{ .{ .mem = .{ .mem64 = undefined } }, .{ .reg = .{ .reg64Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("movdq2q", &[_]u8{ 0xF2, 0x0F, 0xD6 }, .mr, [2]Operand{ .{ .mem = .{ .mem64 = undefined } }, .{ .reg = .{ .regXMM = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr2 = Instr(2).init("movnti", &[_]u8{ 0x0F, 0xC3 }, .mr, [2]Operand{ .{ .mem = .{ .mem32 = undefined } }, .{ .reg = .{ .reg32Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("movnti", &[_]u8{ 0x0F, 0xC3 }, .mr, [2]Operand{ .{ .mem = .{ .mem64 = undefined } }, .{ .reg = .{ .reg64Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("movntq", &[_]u8{ 0x0F, 0xE7 }, .mr, [2]Operand{ .{ .mem = .{ .mem64 = undefined } }, .{ .mem = .{ .mem64 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr2 = Instr(2).init("movq2dq", &[_]u8{ 0xF3, 0x0F, 0xD6 }, .rm, [2]Operand{ .{ .reg = .{ .regXMM = undefined } }, .{ .mem = .{ .mem64 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 128, null, null) }, Instruction{ .instr2 = Instr(2).init("movs", &[_]u8{0xA4}, .po, [2]Operand{ .{ .mem = .{ .mem8 = undefined } }, .{ .mem = .{ .mem8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Repez}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("movs", &[_]u8{0xA5}, .po, [2]Operand{ .{ .mem = .{ .mem16 = undefined } }, .{ .mem = .{ .mem16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Repez}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("movs", &[_]u8{0xA5}, .po, [2]Operand{ .{ .mem = .{ .mem32 = undefined } }, .{ .mem = .{ .mem32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Repez}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("movs", &[_]u8{0xA5}, .po, [2]Operand{ .{ .mem = .{ .mem64 = undefined } }, .{ .mem = .{ .mem64 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Repez}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("movsx", &[_]u8{ 0x0F, 0xBE }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("movsx", &[_]u8{ 0x0F, 0xBE }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("movsx", &[_]u8{ 0x0F, 0xBE }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("movsx", &[_]u8{ 0x0F, 0xBF }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("movsx", &[_]u8{ 0x0F, 0xBF }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("movsxd", &[_]u8{0x63}, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("movzx", &[_]u8{ 0x0F, 0xB6 }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("movzx", &[_]u8{ 0x0F, 0xB6 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("movzx", &[_]u8{ 0x0F, 0xB6 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("movzx", &[_]u8{ 0x0F, 0xB7 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("movzx", &[_]u8{ 0x0F, 0xB7 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) } };
const instrsm3 = [_]Instruction{};
const instrsm4 = [_]Instruction{};
const instrsm = [_][]const Instruction{ &instrsm0, &instrsm1, &instrsm2, &instrsm3, &instrsm4 };

const instrsn0 = [_]Instruction{Instruction{ .instr0 = Instr(0).init("nop", &[_]u8{0x90}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }};
const instrsn1 = [_]Instruction{ Instruction{ .instr1 = Instr(1).init("neg", &[_]u8{0xF6}, .{ .d = 3 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("neg", &[_]u8{0xF6}, .{ .d = 3 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("neg", &[_]u8{0xF7}, .{ .d = 3 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("neg", &[_]u8{0xF7}, .{ .d = 3 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem32 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("neg", &[_]u8{0xF7}, .{ .d = 3 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem64 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr1 = Instr(1).init("nop", &[_]u8{ 0x0F, 0x1F }, .{ .d = 0 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("nop", &[_]u8{ 0x0F, 0x1F }, .{ .d = 0 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem32 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("not", &[_]u8{0xF6}, .{ .d = 2 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("not", &[_]u8{0xF6}, .{ .d = 2 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("not", &[_]u8{0xF7}, .{ .d = 2 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("not", &[_]u8{0xF7}, .{ .d = 2 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem32 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("not", &[_]u8{0xF7}, .{ .d = 2 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem64 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) } };
const instrsn2 = [_]Instruction{};
const instrsn3 = [_]Instruction{};
const instrsn4 = [_]Instruction{};
const instrsn = [_][]const Instruction{ &instrsn0, &instrsn1, &instrsn2, &instrsn3, &instrsn4 };

const instrso0 = [_]Instruction{ Instruction{ .instr0 = Instr(0).init("outsb", &[_]u8{0x6E}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("outsw", &[_]u8{0x6F}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("outsd", &[_]u8{0x6F}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) } };
const instrso1 = [_]Instruction{};
const instrso2 = [_]Instruction{ Instruction{ .instr2 = Instr(2).init("or", &[_]u8{0x0C}, .i, [2]Operand{ .{ .reg = .reg8A }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("or", &[_]u8{0x0D}, .i, [2]Operand{ .{ .reg = .reg16A }, .{ .imm = .{ .imm16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("or", &[_]u8{0x0D}, .i, [2]Operand{ .{ .reg = .reg32A }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("or", &[_]u8{0x0D}, .i, [2]Operand{ .{ .reg = .reg64A }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("or", &[_]u8{0x80}, .{ .d = 1 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("or", &[_]u8{0x80}, .{ .d = 1 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("or", &[_]u8{0x81}, .{ .d = 1 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("or", &[_]u8{0x81}, .{ .d = 1 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("or", &[_]u8{0x81}, .{ .d = 1 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("or", &[_]u8{0x83}, .{ .d = 1 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("or", &[_]u8{0x83}, .{ .d = 1 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("or", &[_]u8{0x83}, .{ .d = 1 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("or", &[_]u8{0x08}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("or", &[_]u8{0x08}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("or", &[_]u8{0x09}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg16Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("or", &[_]u8{0x09}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg32Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("or", &[_]u8{0x09}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg64Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("or", &[_]u8{0x0A}, .rm, [2]Operand{ .{ .reg = .{ .reg8Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("or", &[_]u8{0x0A}, .rm, [2]Operand{ .{ .reg = .{ .reg8Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("or", &[_]u8{0x0B}, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("or", &[_]u8{0x0B}, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("or", &[_]u8{0x0B}, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("out", &[_]u8{0xE6}, .i, [2]Operand{ .{ .imm = .{ .imm8 = undefined } }, .{ .reg = .reg8A } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("out", &[_]u8{0xE7}, .i, [2]Operand{ .{ .imm = .{ .imm8 = undefined } }, .{ .reg = .reg16A } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("out", &[_]u8{0xE7}, .i, [2]Operand{ .{ .imm = .{ .imm8 = undefined } }, .{ .reg = .reg32A } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("out", &[_]u8{0xEE}, .po, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .reg = .reg8A } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("out", &[_]u8{0xEF}, .po, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .reg = .reg16A } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("out", &[_]u8{0xEF}, .po, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .reg = .reg32A } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("outs", &[_]u8{0x6E}, .po, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .mem = .{ .mem8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Repez}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("outs", &[_]u8{0x6F}, .po, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .mem = .{ .mem16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Repez}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("outs", &[_]u8{0x6F}, .po, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .mem = .{ .mem32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Repez}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) } };
const instrso3 = [_]Instruction{};
const instrso4 = [_]Instruction{};
const instrso = [_][]const Instruction{ &instrso0, &instrso1, &instrso2, &instrso3, &instrso4 };

const instrsp0 = [_]Instruction{ Instruction{ .instr0 = Instr(0).init("pause", &[_]u8{ 0xF3, 0x90 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("popa", &[_]u8{0x61}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("popad", &[_]u8{0x61}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("popf", &[_]u8{0x9D}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("popfd", &[_]u8{0x9D}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("popfq", &[_]u8{0x9D}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("pusha", &[_]u8{0x60}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("pushad", &[_]u8{0x60}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("pushf", &[_]u8{0x9C}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("pushfd", &[_]u8{0x9C}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("pushfq", &[_]u8{0x9C}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) } };
const instrsp1 = [_]Instruction{ Instruction{ .instr1 = Instr(1).init("pop", &[_]u8{0x8F}, .{ .d = 0 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("pop", &[_]u8{0x8F}, .{ .d = 0 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem32 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("pop", &[_]u8{0x8F}, .{ .d = 0 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem64 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("pop", &[_]u8{0x58}, .ri, [1]Operand{.{ .reg = .{ .reg16Gp = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr1 = Instr(1).init("pop", &[_]u8{0x58}, .ri, [1]Operand{.{ .reg = .{ .reg32Gp = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("pop", &[_]u8{0x58}, .ri, [1]Operand{.{ .reg = .{ .reg64Gp = undefined } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("pop", &[_]u8{0x1F}, .po, [1]Operand{.{ .reg = .regDS }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("pop", &[_]u8{0x07}, .po, [1]Operand{.{ .reg = .regES }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("pop", &[_]u8{0x17}, .po, [1]Operand{.{ .reg = .regSS }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("pop", &[_]u8{ 0x0F, 0xA1 }, .po, [1]Operand{.{ .reg = .regFS }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("pop", &[_]u8{ 0x0F, 0xA1 }, .po, [1]Operand{.{ .reg = .regFS }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("pop", &[_]u8{ 0x0F, 0xA1 }, .po, [1]Operand{.{ .reg = .regFS }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("pop", &[_]u8{ 0x0F, 0xA9 }, .po, [1]Operand{.{ .reg = .regGS }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("pop", &[_]u8{ 0x0F, 0xA9 }, .po, [1]Operand{.{ .reg = .regGS }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("pop", &[_]u8{ 0x0F, 0xA9 }, .po, [1]Operand{.{ .reg = .regGS }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("prefetcht0", &[_]u8{ 0x0F, 0x18 }, .{ .d = 1 }, [1]Operand{.{ .mem = .{ .mem8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("prefetcht1", &[_]u8{ 0x0F, 0x18 }, .{ .d = 2 }, [1]Operand{.{ .mem = .{ .mem8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("prefetcht2", &[_]u8{ 0x0F, 0x18 }, .{ .d = 3 }, [1]Operand{.{ .mem = .{ .mem8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("prefetchnta", &[_]u8{ 0x0F, 0x18 }, .{ .d = 0 }, [1]Operand{.{ .mem = .{ .mem8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("ptwrite", &[_]u8{ 0xF3, 0x0F, 0xAE }, .{ .d = 4 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem64 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr1 = Instr(1).init("ptwrite", &[_]u8{ 0xF3, 0x0F, 0xAE }, .{ .d = 4 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem32 = undefined } } }}, @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("push", &[_]u8{0xFF}, .{ .d = 6 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("push", &[_]u8{0xFF}, .{ .d = 6 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem32 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("push", &[_]u8{0xFF}, .{ .d = 6 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem64 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("push", &[_]u8{0x50}, .ri, [1]Operand{.{ .reg = .{ .reg16Gp = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr1 = Instr(1).init("push", &[_]u8{0x50}, .ri, [1]Operand{.{ .reg = .{ .reg32Gp = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("push", &[_]u8{0x50}, .ri, [1]Operand{.{ .reg = .{ .reg64Gp = undefined } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("push", &[_]u8{0x6A}, .i, [1]Operand{.{ .imm = .{ .imm8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("push", &[_]u8{0x68}, .i, [1]Operand{.{ .imm = .{ .imm16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr1 = Instr(1).init("push", &[_]u8{0x68}, .i, [1]Operand{.{ .imm = .{ .imm32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("push", &[_]u8{0x0E}, .po, [1]Operand{.{ .reg = .regCS }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("push", &[_]u8{0x16}, .po, [1]Operand{.{ .reg = .regSS }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("push", &[_]u8{0x1E}, .po, [1]Operand{.{ .reg = .regDS }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("push", &[_]u8{0x06}, .po, [1]Operand{.{ .reg = .regES }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("push", &[_]u8{ 0x0F, 0xA0 }, .po, [1]Operand{.{ .reg = .regFS }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("push", &[_]u8{ 0x0F, 0xA8 }, .po, [1]Operand{.{ .reg = .regGS }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) } };
const instrsp2 = [_]Instruction{ Instruction{ .instr2 = Instr(2).init("popcnt", &[_]u8{ 0xF3, 0x0F, 0xB8 }, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("popcnt", &[_]u8{ 0xF3, 0x0F, 0xB8 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("popcnt", &[_]u8{ 0xF3, 0x0F, 0xB8 }, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) } };
const instrsp3 = [_]Instruction{Instruction{ .instr3 = Instr(3).init("pshufw", &[_]u8{ 0x0F, 0x70 }, .rm, [3]Operand{ .{ .reg = .{ .regXMM = undefined } }, .{ .mem = .{ .mem64 = undefined } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 128, null, null) }};
const instrsp4 = [_]Instruction{};
const instrsp = [_][]const Instruction{ &instrsp0, &instrsp1, &instrsp2, &instrsp3, &instrsp4 };

const instrsq0 = [_]Instruction{};
const instrsq1 = [_]Instruction{};
const instrsq2 = [_]Instruction{};
const instrsq3 = [_]Instruction{};
const instrsq4 = [_]Instruction{};
const instrsq = [_][]const Instruction{ &instrsq0, &instrsq1, &instrsq2, &instrsq3, &instrsq4 };

const instrsr0 = [_]Instruction{ Instruction{ .instr0 = Instr(0).init("rdmsr", &[_]u8{ 0x0F, 0x32 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("rdpmc", &[_]u8{ 0x0F, 0x33 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("rdtsc", &[_]u8{ 0x0F, 0x31 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("rdtscp", &[_]u8{ 0x0F, 0x01, 0xF9 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("ret", &[_]u8{0xC3}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("ret", &[_]u8{0xCB}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("rsm", &[_]u8{ 0x0F, 0xAA }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) } };
const instrsr1 = [_]Instruction{ Instruction{ .instr1 = Instr(1).init("rcl", &[_]u8{0xD0}, .{ .d = 2 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("rcl", &[_]u8{0xD0}, .{ .d = 2 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("rcl", &[_]u8{0xD1}, .{ .d = 2 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("rcl", &[_]u8{0xD1}, .{ .d = 2 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem32 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("rcl", &[_]u8{0xD1}, .{ .d = 2 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem64 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr1 = Instr(1).init("rcr", &[_]u8{0xD0}, .{ .d = 3 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("rcr", &[_]u8{0xD0}, .{ .d = 3 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("rcr", &[_]u8{0xD1}, .{ .d = 3 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("rcr", &[_]u8{0xD1}, .{ .d = 3 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem32 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("rcr", &[_]u8{0xD1}, .{ .d = 3 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem64 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr1 = Instr(1).init("rol", &[_]u8{0xD0}, .{ .d = 0 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("rol", &[_]u8{0xD0}, .{ .d = 0 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("rol", &[_]u8{0xD1}, .{ .d = 0 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("rol", &[_]u8{0xD1}, .{ .d = 0 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem32 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("rol", &[_]u8{0xD1}, .{ .d = 0 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem64 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr1 = Instr(1).init("ror", &[_]u8{0xD0}, .{ .d = 1 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("ror", &[_]u8{0xD0}, .{ .d = 1 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("ror", &[_]u8{0xD1}, .{ .d = 1 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("ror", &[_]u8{0xD1}, .{ .d = 1 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem32 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("ror", &[_]u8{0xD1}, .{ .d = 1 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem64 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr1 = Instr(1).init("ret", &[_]u8{0xC2}, .i, [1]Operand{.{ .imm = .{ .imm16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr1 = Instr(1).init("ret", &[_]u8{0xCA}, .i, [1]Operand{.{ .imm = .{ .imm16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) } };
const instrsr2 = [_]Instruction{ Instruction{ .instr2 = Instr(2).init("rcl", &[_]u8{0xD2}, .{ .d = 2 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("rcl", &[_]u8{0xD2}, .{ .d = 2 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("rcl", &[_]u8{0xC0}, .{ .d = 2 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("rcl", &[_]u8{0xC0}, .{ .d = 2 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("rcl", &[_]u8{0xD3}, .{ .d = 2 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("rcl", &[_]u8{0xC1}, .{ .d = 2 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("rcl", &[_]u8{0xD3}, .{ .d = 2 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("rcl", &[_]u8{0xD3}, .{ .d = 2 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("rcl", &[_]u8{0xC1}, .{ .d = 2 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("rcl", &[_]u8{0xC1}, .{ .d = 2 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("rcr", &[_]u8{0xD2}, .{ .d = 3 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("rcr", &[_]u8{0xD2}, .{ .d = 3 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("rcr", &[_]u8{0xC0}, .{ .d = 3 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("rcr", &[_]u8{0xC0}, .{ .d = 3 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("rcr", &[_]u8{0xD3}, .{ .d = 3 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("rcr", &[_]u8{0xC1}, .{ .d = 3 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("rcr", &[_]u8{0xD3}, .{ .d = 3 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("rcr", &[_]u8{0xD3}, .{ .d = 3 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("rcr", &[_]u8{0xC1}, .{ .d = 3 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("rcr", &[_]u8{0xC1}, .{ .d = 3 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("rol", &[_]u8{0xD2}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("rol", &[_]u8{0xD2}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("rol", &[_]u8{0xC0}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("rol", &[_]u8{0xC0}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("rol", &[_]u8{0xD3}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("rol", &[_]u8{0xC1}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("rol", &[_]u8{0xD3}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("rol", &[_]u8{0xD3}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("rol", &[_]u8{0xC1}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("rol", &[_]u8{0xC1}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("ror", &[_]u8{0xD2}, .{ .d = 1 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("ror", &[_]u8{0xD2}, .{ .d = 1 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("ror", &[_]u8{0xC0}, .{ .d = 1 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("ror", &[_]u8{0xC0}, .{ .d = 1 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("ror", &[_]u8{0xD3}, .{ .d = 1 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("ror", &[_]u8{0xC1}, .{ .d = 1 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("ror", &[_]u8{0xD3}, .{ .d = 1 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("ror", &[_]u8{0xD3}, .{ .d = 1 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("ror", &[_]u8{0xC1}, .{ .d = 1 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("ror", &[_]u8{0xC1}, .{ .d = 1 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) } };
const instrsr3 = [_]Instruction{};
const instrsr4 = [_]Instruction{};
const instrsr = [_][]const Instruction{ &instrsr0, &instrsr1, &instrsr2, &instrsr3, &instrsr4 };

const instrss0 = [_]Instruction{ Instruction{ .instr0 = Instr(0).init("sahf", &[_]u8{0x9E}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("scasb", &[_]u8{0xAE}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{ Prefix.Repez, Prefix.Repnez }, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("scasw", &[_]u8{0xAF}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{ Prefix.Repez, Prefix.Repnez }, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("scasd", &[_]u8{0xAF}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{ Prefix.Repez, Prefix.Repnez }, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("scasq", &[_]u8{0xAF}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr0 = Instr(0).init("sfence", &[_]u8{ 0x0F, 0xAE, 0xF8 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("stc", &[_]u8{0xF9}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("std", &[_]u8{0xFD}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("sti", &[_]u8{0xFB}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("stosb", &[_]u8{0xAA}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("stosw", &[_]u8{0xAB}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("stosd", &[_]u8{0xAB}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("stosq", &[_]u8{0xAB}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr0 = Instr(0).init("swapgs", &[_]u8{ 0x0F, 0x01, 0xF8 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("syscall", &[_]u8{ 0x0F, 0x05 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("sysenter", &[_]u8{ 0x0F, 0x34 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("sysexit", &[_]u8{ 0x0F, 0x35 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("sysexit", &[_]u8{ 0x0F, 0x35 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr0 = Instr(0).init("sysret", &[_]u8{ 0x0F, 0x07 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("sysret", &[_]u8{ 0x0F, 0x07 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, &[_]Prefix{Prefix.RexW}) } };
const instrss1 = [_]Instruction{ Instruction{ .instr1 = Instr(1).init("sal", &[_]u8{0xD0}, .{ .d = 4 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("sal", &[_]u8{0xD0}, .{ .d = 4 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("sal", &[_]u8{0xD1}, .{ .d = 4 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("sal", &[_]u8{0xD1}, .{ .d = 4 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem32 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("sal", &[_]u8{0xD1}, .{ .d = 4 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem64 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr1 = Instr(1).init("sar", &[_]u8{0xD0}, .{ .d = 7 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("sar", &[_]u8{0xD0}, .{ .d = 7 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("sar", &[_]u8{0xD1}, .{ .d = 7 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("sar", &[_]u8{0xD1}, .{ .d = 7 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem32 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("sar", &[_]u8{0xD1}, .{ .d = 7 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem64 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr1 = Instr(1).init("shl", &[_]u8{0xD0}, .{ .d = 4 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("shl", &[_]u8{0xD0}, .{ .d = 4 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("shl", &[_]u8{0xD1}, .{ .d = 4 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("shl", &[_]u8{0xD1}, .{ .d = 4 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem32 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("shl", &[_]u8{0xD1}, .{ .d = 4 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem64 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr1 = Instr(1).init("shr", &[_]u8{0xD0}, .{ .d = 5 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("shr", &[_]u8{0xD0}, .{ .d = 5 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("shr", &[_]u8{0xD1}, .{ .d = 5 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("shr", &[_]u8{0xD1}, .{ .d = 5 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem32 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("shr", &[_]u8{0xD1}, .{ .d = 5 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem64 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr1 = Instr(1).init("scas", &[_]u8{0xAE}, .po, [1]Operand{.{ .mem = .{ .mem8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{ Prefix.Repez, Prefix.Repnez }, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("scas", &[_]u8{0xAF}, .po, [1]Operand{.{ .mem = .{ .mem16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{ Prefix.Repez, Prefix.Repnez }, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("scas", &[_]u8{0xAF}, .po, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{ Prefix.Repez, Prefix.Repnez }, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("scas", &[_]u8{0xAF}, .po, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{ Prefix.Repez, Prefix.Repnez }, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr1 = Instr(1).init("seta", &[_]u8{ 0x0F, 0x97 }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("seta", &[_]u8{ 0x0F, 0x97 }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("setae", &[_]u8{ 0x0F, 0x93 }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("setae", &[_]u8{ 0x0F, 0x93 }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("setb", &[_]u8{ 0x0F, 0x92 }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("setb", &[_]u8{ 0x0F, 0x92 }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("setbe", &[_]u8{ 0x0F, 0x96 }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("setbe", &[_]u8{ 0x0F, 0x96 }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("setc", &[_]u8{ 0x0F, 0x92 }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("setc", &[_]u8{ 0x0F, 0x92 }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("sete", &[_]u8{ 0x0F, 0x94 }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("sete", &[_]u8{ 0x0F, 0x94 }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("setg", &[_]u8{ 0x0F, 0x9F }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("setg", &[_]u8{ 0x0F, 0x9F }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("setge", &[_]u8{ 0x0F, 0x9D }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("setge", &[_]u8{ 0x0F, 0x9D }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("setl", &[_]u8{ 0x0F, 0x9C }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("setl", &[_]u8{ 0x0F, 0x9C }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("setle", &[_]u8{ 0x0F, 0x9E }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("setle", &[_]u8{ 0x0F, 0x9E }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("setna", &[_]u8{ 0x0F, 0x96 }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("setna", &[_]u8{ 0x0F, 0x96 }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("setnae", &[_]u8{ 0x0F, 0x92 }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("setnae", &[_]u8{ 0x0F, 0x92 }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("setnb", &[_]u8{ 0x0F, 0x93 }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("setnb", &[_]u8{ 0x0F, 0x93 }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("setnbe", &[_]u8{ 0x0F, 0x97 }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("setnbe", &[_]u8{ 0x0F, 0x97 }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("setnc", &[_]u8{ 0x0F, 0x93 }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("setnc", &[_]u8{ 0x0F, 0x93 }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("setne", &[_]u8{ 0x0F, 0x95 }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("setne", &[_]u8{ 0x0F, 0x95 }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("setng", &[_]u8{ 0x0F, 0x9E }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("setng", &[_]u8{ 0x0F, 0x9E }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("setnge", &[_]u8{ 0x0F, 0x9C }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("setnge", &[_]u8{ 0x0F, 0x9C }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("setnl", &[_]u8{ 0x0F, 0x9D }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("setnl", &[_]u8{ 0x0F, 0x9D }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr1 = Instr(1).init("setnle", &[_]u8{ 0x0F, 0x9F }, .po, [1]Operand{.{ .rm = .{ .mem = .{ .mem8 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("sgdt", &[_]u8{ 0x0F, 0x01 }, .{ .d = 0 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("sidt", &[_]u8{ 0x0F, 0x01 }, .{ .d = 1 }, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("sldt", &[_]u8{ 0x0F, 0x00 }, .{ .d = 0 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("sldt", &[_]u8{ 0x0F, 0x00 }, .{ .d = 0 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr1 = Instr(1).init("smsw", &[_]u8{ 0x0F, 0x01 }, .{ .d = 4 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("smsw", &[_]u8{ 0x0F, 0x01 }, .{ .d = 4 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("smsw", &[_]u8{ 0x0F, 0x01 }, .{ .d = 4 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr1 = Instr(1).init("stos", &[_]u8{0xAA}, .po, [1]Operand{.{ .mem = .{ .mem8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Repez}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("stos", &[_]u8{0xAB}, .po, [1]Operand{.{ .mem = .{ .mem16 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Repez}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("stos", &[_]u8{0xAB}, .po, [1]Operand{.{ .mem = .{ .mem32 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Repez}, 32, null, null) }, Instruction{ .instr1 = Instr(1).init("stos", &[_]u8{0xAB}, .po, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Repez}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr1 = Instr(1).init("str", &[_]u8{ 0x0F, 0x00 }, .{ .d = 1 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) } };
const instrss2 = [_]Instruction{ Instruction{ .instr2 = Instr(2).init("sal", &[_]u8{0xD2}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("sal", &[_]u8{0xD2}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("sal", &[_]u8{0xC0}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("sal", &[_]u8{0xC0}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("sal", &[_]u8{0xD3}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("sal", &[_]u8{0xC1}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("sal", &[_]u8{0xD3}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("sal", &[_]u8{0xD3}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("sal", &[_]u8{0xC1}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("sal", &[_]u8{0xC1}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("sar", &[_]u8{0xD2}, .{ .d = 7 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("sar", &[_]u8{0xD2}, .{ .d = 7 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("sar", &[_]u8{0xC0}, .{ .d = 7 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("sar", &[_]u8{0xC0}, .{ .d = 7 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("sar", &[_]u8{0xD3}, .{ .d = 7 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("sar", &[_]u8{0xC1}, .{ .d = 7 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("sar", &[_]u8{0xD3}, .{ .d = 7 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("sar", &[_]u8{0xD3}, .{ .d = 7 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("sar", &[_]u8{0xC1}, .{ .d = 7 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("sar", &[_]u8{0xC1}, .{ .d = 7 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("shl", &[_]u8{0xD2}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("shl", &[_]u8{0xD2}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("shl", &[_]u8{0xC0}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("shl", &[_]u8{0xC0}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("shl", &[_]u8{0xD3}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("shl", &[_]u8{0xC1}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("shl", &[_]u8{0xD3}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("shl", &[_]u8{0xD3}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("shl", &[_]u8{0xC1}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("shl", &[_]u8{0xC1}, .{ .d = 4 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("shr", &[_]u8{0xD2}, .{ .d = 5 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("shr", &[_]u8{0xD2}, .{ .d = 5 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("shr", &[_]u8{0xC0}, .{ .d = 5 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("shr", &[_]u8{0xC0}, .{ .d = 5 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("shr", &[_]u8{0xD3}, .{ .d = 5 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("shr", &[_]u8{0xC1}, .{ .d = 5 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("shr", &[_]u8{0xD3}, .{ .d = 5 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("shr", &[_]u8{0xD3}, .{ .d = 5 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("shr", &[_]u8{0xC1}, .{ .d = 5 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("shr", &[_]u8{0xC1}, .{ .d = 5 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("sbb", &[_]u8{0x1C}, .i, [2]Operand{ .{ .reg = .reg8A }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("sbb", &[_]u8{0x1D}, .i, [2]Operand{ .{ .reg = .reg16A }, .{ .imm = .{ .imm16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("sbb", &[_]u8{0x1D}, .i, [2]Operand{ .{ .reg = .reg32A }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("sbb", &[_]u8{0x1D}, .i, [2]Operand{ .{ .reg = .reg64A }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("sbb", &[_]u8{0x80}, .{ .d = 3 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("sbb", &[_]u8{0x80}, .{ .d = 3 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("sbb", &[_]u8{0x81}, .{ .d = 3 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("sbb", &[_]u8{0x81}, .{ .d = 3 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("sbb", &[_]u8{0x81}, .{ .d = 3 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("sbb", &[_]u8{0x83}, .{ .d = 3 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("sbb", &[_]u8{0x83}, .{ .d = 3 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("sbb", &[_]u8{0x83}, .{ .d = 3 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("sbb", &[_]u8{0x18}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("sbb", &[_]u8{0x18}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("sbb", &[_]u8{0x19}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg16Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("sbb", &[_]u8{0x19}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg32Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("sbb", &[_]u8{0x19}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg64Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("sbb", &[_]u8{0x1A}, .rm, [2]Operand{ .{ .reg = .{ .reg8Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("sbb", &[_]u8{0x1A}, .rm, [2]Operand{ .{ .reg = .{ .reg8Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("sbb", &[_]u8{0x1B}, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("sbb", &[_]u8{0x1B}, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("sbb", &[_]u8{0x1B}, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("sub", &[_]u8{0x2C}, .i, [2]Operand{ .{ .reg = .reg8A }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("sub", &[_]u8{0x2D}, .i, [2]Operand{ .{ .reg = .reg16A }, .{ .imm = .{ .imm16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("sub", &[_]u8{0x2D}, .i, [2]Operand{ .{ .reg = .reg32A }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("sub", &[_]u8{0x2D}, .i, [2]Operand{ .{ .reg = .reg64A }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("sub", &[_]u8{0x80}, .{ .d = 5 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("sub", &[_]u8{0x80}, .{ .d = 5 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("sub", &[_]u8{0x81}, .{ .d = 5 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("sub", &[_]u8{0x81}, .{ .d = 5 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("sub", &[_]u8{0x81}, .{ .d = 5 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("sub", &[_]u8{0x83}, .{ .d = 5 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("sub", &[_]u8{0x83}, .{ .d = 5 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("sub", &[_]u8{0x83}, .{ .d = 5 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("sub", &[_]u8{0x28}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("sub", &[_]u8{0x28}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("sub", &[_]u8{0x29}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg16Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("sub", &[_]u8{0x29}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg32Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("sub", &[_]u8{0x29}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg64Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("sub", &[_]u8{0x2A}, .rm, [2]Operand{ .{ .reg = .{ .reg8Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("sub", &[_]u8{0x2A}, .rm, [2]Operand{ .{ .reg = .{ .reg8Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("sub", &[_]u8{0x2B}, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("sub", &[_]u8{0x2B}, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("sub", &[_]u8{0x2B}, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) } };
const instrss3 = [_]Instruction{ Instruction{ .instr3 = Instr(3).init("shld", &[_]u8{ 0x0F, 0xA4 }, .mr, [3]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg16Gp = undefined } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr3 = Instr(3).init("shld", &[_]u8{ 0x0F, 0xA5 }, .mr, [3]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg16Gp = undefined } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr3 = Instr(3).init("shld", &[_]u8{ 0x0F, 0xA4 }, .mr, [3]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg32Gp = undefined } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr3 = Instr(3).init("shld", &[_]u8{ 0x0F, 0xA4 }, .mr, [3]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg64Gp = undefined } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr3 = Instr(3).init("shld", &[_]u8{ 0x0F, 0xA5 }, .mr, [3]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg32Gp = undefined } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr3 = Instr(3).init("shld", &[_]u8{ 0x0F, 0xA5 }, .mr, [3]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg64Gp = undefined } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr3 = Instr(3).init("shrd", &[_]u8{ 0x0F, 0xAC }, .mr, [3]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg16Gp = undefined } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr3 = Instr(3).init("shrd", &[_]u8{ 0x0F, 0xAD }, .mr, [3]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg16Gp = undefined } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr3 = Instr(3).init("shrd", &[_]u8{ 0x0F, 0xAC }, .mr, [3]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg32Gp = undefined } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr3 = Instr(3).init("shrd", &[_]u8{ 0x0F, 0xAC }, .mr, [3]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg64Gp = undefined } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr3 = Instr(3).init("shrd", &[_]u8{ 0x0F, 0xAD }, .mr, [3]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg32Gp = undefined } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr3 = Instr(3).init("shrd", &[_]u8{ 0x0F, 0xAD }, .mr, [3]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg64Gp = undefined } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) } };
const instrss4 = [_]Instruction{};
const instrss = [_][]const Instruction{ &instrss0, &instrss1, &instrss2, &instrss3, &instrss4 };

const instrst0 = [_]Instruction{};
const instrst1 = [_]Instruction{};
const instrst2 = [_]Instruction{ Instruction{ .instr2 = Instr(2).init("test", &[_]u8{0xA8}, .i, [2]Operand{ .{ .reg = .reg8A }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("test", &[_]u8{0xA9}, .i, [2]Operand{ .{ .reg = .reg16A }, .{ .imm = .{ .imm16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("test", &[_]u8{0xA9}, .i, [2]Operand{ .{ .reg = .reg32A }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("test", &[_]u8{0xA9}, .i, [2]Operand{ .{ .reg = .reg64A }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("test", &[_]u8{0xF6}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("test", &[_]u8{0xF6}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("test", &[_]u8{0xF7}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("test", &[_]u8{0xF7}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("test", &[_]u8{0xF7}, .{ .d = 0 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("test", &[_]u8{0x84}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("test", &[_]u8{0x84}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("test", &[_]u8{0x85}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg16Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("test", &[_]u8{0x85}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg32Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("test", &[_]u8{0x85}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg64Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) } };
const instrst3 = [_]Instruction{};
const instrst4 = [_]Instruction{};
const instrst = [_][]const Instruction{ &instrst0, &instrst1, &instrst2, &instrst3, &instrst4 };

const instrsu0 = [_]Instruction{ Instruction{ .instr0 = Instr(0).init("ud0", &[_]u8{ 0x0F, 0xFF }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("ud2", &[_]u8{ 0x0F, 0x0B }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) } };
const instrsu1 = [_]Instruction{};
const instrsu2 = [_]Instruction{Instruction{ .instr2 = Instr(2).init("ud1", &[_]u8{ 0x0F, 0xB9 }, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }};
const instrsu3 = [_]Instruction{};
const instrsu4 = [_]Instruction{};
const instrsu = [_][]const Instruction{ &instrsu0, &instrsu1, &instrsu2, &instrsu3, &instrsu4 };

const instrsv0 = [_]Instruction{};
const instrsv1 = [_]Instruction{ Instruction{ .instr1 = Instr(1).init("verr", &[_]u8{ 0x0F, 0x00 }, .{ .d = 4 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) }, Instruction{ .instr1 = Instr(1).init("verw", &[_]u8{ 0x0F, 0x00 }, .{ .d = 5 }, [1]Operand{.{ .rm = .{ .mem = .{ .mem16 = undefined } } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 16, null, null) } };
const instrsv2 = [_]Instruction{};
const instrsv3 = [_]Instruction{};
const instrsv4 = [_]Instruction{};
const instrsv = [_][]const Instruction{ &instrsv0, &instrsv1, &instrsv2, &instrsv3, &instrsv4 };

const instrsw0 = [_]Instruction{ Instruction{ .instr0 = Instr(0).init("wait", &[_]u8{0x9B}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("wbinvd", &[_]u8{ 0x0F, 0x09 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("wrmsr", &[_]u8{ 0x0F, 0x30 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) } };
const instrsw1 = [_]Instruction{};
const instrsw2 = [_]Instruction{};
const instrsw3 = [_]Instruction{};
const instrsw4 = [_]Instruction{};
const instrsw = [_][]const Instruction{ &instrsw0, &instrsw1, &instrsw2, &instrsw3, &instrsw4 };

const instrsx0 = [_]Instruction{ Instruction{ .instr0 = Instr(0).init("xgetbv", &[_]u8{ 0x0F, 0x01, 0xD0 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("xlatb", &[_]u8{0xD7}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) }, Instruction{ .instr0 = Instr(0).init("xlatb", &[_]u8{0xD7}, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr0 = Instr(0).init("xsetbv", &[_]u8{ 0x0F, 0x01, 0xD1 }, .po, [0]Operand{}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 32, null, null) } };
const instrsx1 = [_]Instruction{ Instruction{ .instr1 = Instr(1).init("xlat", &[_]u8{0xD7}, .po, [1]Operand{.{ .mem = .{ .mem8 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 8, null, null) }, Instruction{ .instr1 = Instr(1).init("xrstor", &[_]u8{ 0x0F, 0xAE }, .{ .d = 5 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("xrstor64", &[_]u8{ 0x0F, 0xAE }, .{ .d = 5 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr1 = Instr(1).init("xrstors", &[_]u8{ 0x0F, 0xC7 }, .{ .d = 3 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("xrstors64", &[_]u8{ 0x0F, 0xC7 }, .{ .d = 3 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr1 = Instr(1).init("xsave", &[_]u8{ 0x0F, 0xAE }, .{ .d = 4 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("xsave64", &[_]u8{ 0x0F, 0xAE }, .{ .d = 4 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr1 = Instr(1).init("xsavec", &[_]u8{ 0x0F, 0xC7 }, .{ .d = 4 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("xsavec64", &[_]u8{ 0x0F, 0xC7 }, .{ .d = 4 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr1 = Instr(1).init("xsaves", &[_]u8{ 0x0F, 0xC7 }, .{ .d = 5 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, null) }, Instruction{ .instr1 = Instr(1).init("xsaves64", &[_]u8{ 0x0F, 0xC7 }, .{ .d = 5 }, [1]Operand{.{ .mem = .{ .mem64 = undefined } }}, @enumToInt(OperatingMode.Bits64), &[_]Prefix{}, 64, null, &[_]Prefix{Prefix.RexW}) } };
const instrsx2 = [_]Instruction{ Instruction{ .instr2 = Instr(2).init("xadd", &[_]u8{ 0x0F, 0xC0 }, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("xadd", &[_]u8{ 0x0F, 0xC0 }, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("xadd", &[_]u8{ 0x0F, 0xC1 }, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg16Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("xadd", &[_]u8{ 0x0F, 0xC1 }, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg32Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("xadd", &[_]u8{ 0x0F, 0xC1 }, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg64Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("xchg", &[_]u8{0x90}, .ri, [2]Operand{ .{ .reg = .reg16A }, .{ .reg = .{ .reg16Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("xchg", &[_]u8{0x90}, .ri, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .reg = .reg16A } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("xchg", &[_]u8{0x90}, .ri, [2]Operand{ .{ .reg = .reg32A }, .{ .reg = .{ .reg32Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("xchg", &[_]u8{0x90}, .ri, [2]Operand{ .{ .reg = .reg64A }, .{ .reg = .{ .reg64Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("xchg", &[_]u8{0x90}, .ri, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .reg = .reg32A } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("xchg", &[_]u8{0x90}, .ri, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .reg = .reg64A } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("xchg", &[_]u8{0x86}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("xchg", &[_]u8{0x86}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("xchg", &[_]u8{0x86}, .rm, [2]Operand{ .{ .reg = .{ .reg8Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("xchg", &[_]u8{0x86}, .rm, [2]Operand{ .{ .reg = .{ .reg8Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("xchg", &[_]u8{0x87}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg16Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("xchg", &[_]u8{0x87}, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("xchg", &[_]u8{0x87}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg32Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("xchg", &[_]u8{0x87}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg64Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("xchg", &[_]u8{0x87}, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("xchg", &[_]u8{0x87}, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("xor", &[_]u8{0x34}, .i, [2]Operand{ .{ .reg = .reg8A }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("xor", &[_]u8{0x35}, .i, [2]Operand{ .{ .reg = .reg16A }, .{ .imm = .{ .imm16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("xor", &[_]u8{0x35}, .i, [2]Operand{ .{ .reg = .reg32A }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("xor", &[_]u8{0x35}, .i, [2]Operand{ .{ .reg = .reg64A }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("xor", &[_]u8{0x80}, .{ .d = 6 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("xor", &[_]u8{0x80}, .{ .d = 6 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("xor", &[_]u8{0x81}, .{ .d = 6 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm16 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("xor", &[_]u8{0x81}, .{ .d = 6 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("xor", &[_]u8{0x81}, .{ .d = 6 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm32 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("xor", &[_]u8{0x83}, .{ .d = 6 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, null, null) }, Instruction{ .instr2 = Instr(2).init("xor", &[_]u8{0x83}, .{ .d = 6 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("xor", &[_]u8{0x83}, .{ .d = 6 }, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .imm = .{ .imm8 = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("xor", &[_]u8{0x30}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("xor", &[_]u8{0x30}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem8 = undefined } } }, .{ .reg = .{ .reg8Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("xor", &[_]u8{0x31}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem16 = undefined } } }, .{ .reg = .{ .reg16Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("xor", &[_]u8{0x31}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem32 = undefined } } }, .{ .reg = .{ .reg32Gp = undefined } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("xor", &[_]u8{0x31}, .mr, [2]Operand{ .{ .rm = .{ .mem = .{ .mem64 = undefined } } }, .{ .reg = .{ .reg64Gp = undefined } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) }, Instruction{ .instr2 = Instr(2).init("xor", &[_]u8{0x32}, .rm, [2]Operand{ .{ .reg = .{ .reg8Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, null) }, Instruction{ .instr2 = Instr(2).init("xor", &[_]u8{0x32}, .rm, [2]Operand{ .{ .reg = .{ .reg8Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem8 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 8, null, &[_]Prefix{Prefix.Rex}) }, Instruction{ .instr2 = Instr(2).init("xor", &[_]u8{0x33}, .rm, [2]Operand{ .{ .reg = .{ .reg16Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem16 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 16, &[_]Prefix{Prefix.OpOvrd}, &[_]Prefix{Prefix.OpOvrd}) }, Instruction{ .instr2 = Instr(2).init("xor", &[_]u8{0x33}, .rm, [2]Operand{ .{ .reg = .{ .reg32Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem32 = undefined } } } }, @enumToInt(OperatingMode.Bits16) | @enumToInt(OperatingMode.Bits32) | @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 32, null, null) }, Instruction{ .instr2 = Instr(2).init("xor", &[_]u8{0x33}, .rm, [2]Operand{ .{ .reg = .{ .reg64Gp = undefined } }, .{ .rm = .{ .mem = .{ .mem64 = undefined } } } }, @enumToInt(OperatingMode.Bits64), &[_]Prefix{Prefix.Lock}, 64, null, &[_]Prefix{Prefix.RexW}) } };
const instrsx3 = [_]Instruction{};
const instrsx4 = [_]Instruction{};
const instrsx = [_][]const Instruction{ &instrsx0, &instrsx1, &instrsx2, &instrsx3, &instrsx4 };

const instrsy0 = [_]Instruction{};
const instrsy1 = [_]Instruction{};
const instrsy2 = [_]Instruction{};
const instrsy3 = [_]Instruction{};
const instrsy4 = [_]Instruction{};
const instrsy = [_][]const Instruction{ &instrsy0, &instrsy1, &instrsy2, &instrsy3, &instrsy4 };

const instrsz0 = [_]Instruction{};
const instrsz1 = [_]Instruction{};
const instrsz2 = [_]Instruction{};
const instrsz3 = [_]Instruction{};
const instrsz4 = [_]Instruction{};
const instrsz = [_][]const Instruction{ &instrsz0, &instrsz1, &instrsz2, &instrsz3, &instrsz4 };

pub const instrs = [_][]const []const Instruction{ &instrsa, &instrsb, &instrsc, &instrsd, &instrse, &instrsf, &instrsg, &instrsh, &instrsi, &instrsj, &instrsk, &instrsl, &instrsm, &instrsn, &instrso, &instrsp, &instrsq, &instrsr, &instrss, &instrst, &instrsu, &instrsv, &instrsw, &instrsx, &instrsy, &instrsz };
